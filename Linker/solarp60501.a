;/*****************************************************
;derived from ravindraenergy60501.c
;date: 1-03-2021
;reason: to create code for new hardware
;SOLARP1 and SOLARP2
;
;* adjust ports according to new hardware
;* add mpu6050 and remove adc routines
;*add backtracking parameters
;*add backtracking logic
;* add stow emergency input logic and reset logic
;
;
;
;
;derived from ravindra enrgy1.c
;date: 26-02-2020
;reason:
;to accomodate new software
;lcd pins are all interchanged
;
;
;
;derived from ravindra energy.c
;date: 21-06-2019
;reason: to add loading of rtc value  to eeprom on power up if rtc value is valid.
;
;
;derived from only tracker1.c
;date: 19 -06-2019
;reason: to add protection for corruption of data
;
;1. add backup for time and date if corrupt
;        if time is corrupt, reset time to last stored value, if last stored value is ff, then reset to 12:00
;        store time and date every 30mins. total writes /year =16000.
;2. add limits to start angle and end angle. if they are corrupt reset them to 55/125 degrees
;
;
;
;derived from tracker 3 phase.c
;to change the latitude and longitude to 26.5 and 73.8 degrees
;to change the start angle and end angle to 50 deg and 125 deg.
;
;derived from micron 20W.c
;reason: to create a only tracker software
;todo
;1. remove the battery charger and battery voltage related part
;2. remove the adc sensing of various voltages. retain onlty the accelerometer part
;
;
;
;DERIVED FROM LUBI ELECTRONIC.C
;TO CHANGE WELCOME MESSAGE TO MICRON INSTRUMENTS
;
;
;
;derived from tracker3.c
;reason: to change welcome message to lubi electronics.
;
;
;date : 17-11-2013
;derived from tracker2.c
;
;reason:
;1.low battery indication in normal mode. hysterisis to be provided for reconnection on 12.4V
;2. cutoff backlight on low battery status (errfl2)
;3. if adc_battery > 15V, cut charging , put message ("no battery connected");
;4. remove condition that if battery voltage < 5V, disconnect charging.
;5. increase current limits to 1.2A/1A
;6. overflow for OCR1A correction
;7. fast charging depending on battery voltage
;8. low battery/battery not connected sensing and algorithm.
;9. bug of sleep mode.
;10.MPPT changed to full charge PV >=battery + 2.0V
;
;
;
;
;
;date: 13 nov 2013
;derived from tracker1.c
;reason: to test in new hardware
;changes:
;OC1A - pin 19 of mega32 - pwm output
;OC1B = pin 18 of mega32 - shutdown for ir2104
;mux lines pc7 and pc5 interchanged to suit new hardware solar4-main
;rs232 to be re-introduced
;
;
;
;
;
;derived from solar14.c
;
;reason: to add algorithm for sleep mode between sunset + 30 min and sunrise - 30 min.
;derived from solar13.c
;reason: to make algorithm change to the mechanical error logic.
;checked once every 30 seconds. if angle has changed more than 2 degrees then continue else end panel movement
;
;
;
;date: 04-nov 2013
;reason: to make following changes as suggested by tata solar
;1.enter/exit of calibration mode for start/emd angle setting improved.**
;2.LED indication in case of error on charger side to be inhibited.    **
;3. timeout for mechanical error to be changed
;4. battery low indication in absence of PV to be indicated.           **
;5. output to relay to be inhibited in all conditions even in manual mode. **
;
;
;date: 23-9-13
;reason:
;done: setting of latitude/longitude and timezone for user
;result stored in riset,settm.
;
;todo: put value in regular calculation of target angle.
;remove existing table for sunrise/set.
;
;********
;
;
;date: 16-09-2013
;
;derived from solar4.c
;reason:to add latitude/longitude calculations.
;only for checking purpose
;
;
;
;
;
;date: 20 july 2013
;reason:
;to add logic to come out of the program mode after 29 seconds of inactivity of key pressed
;the variable used is program_timeout, function added is clear_default();
;
;date:5-7-13
;reason: to add RS232 control to the unit.
;if 'R' is received, send record count.
;if 'P' is received, send print command.
;if 's' is received , reset record count.
;
;
;date : 29-6-13
;derived from solar1.c
;reason:
;to add fixed parameters batteryvoltage = 12V and MPPT 17V
;and to monitor and control charging parameters
;
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 27.06.2013
;Author  : NeVaDa
;Company : Warner Brothers Movie World
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 11,059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <math.h>
;#include <ctype.h>
;#include <stdlib.h>
;#include <sleep.h>
;
;// I2C Bus functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __i2c_port=0x1B ;PORTA
;PCODE: $0000000E VOL: 0
   .equ __sda_bit=4
;PCODE: $0000000F VOL: 0
   .equ __scl_bit=5
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 00B8 #endasm
;#include <i2c.h>
;
;// DS1307 Real Time Clock functions
;#include <ds1307.h>
;
;//Alphanumeric LCD Module functions
;#asm
;PCODE: $00000012 VOL: 0
   .equ __lcd_port=0x18 ;PORTB
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 00C1 #endasm
;#include <alcd.h>
;
;#define key1    PIND.6
;#define key2    PINC.4
;#define key3    PINC.3
;#define key4    PIND.1
;#define relay2  PORTC.0
;#define relay1  PORTD.7
;#define led1    PORTD.3
;#define led2    PORTD.4
;#define led3    PORTD.5
;#define led4    PORTA.0
;#define led5    PORTA.1
;#define led6    PORTA.2
;#define mux1    PORTC.5
;#define mux2    PORTC.6
;#define mux3    PORTC.7
;#define backlight   PORTB.4
;
;
;//////mpu6050 definition section//////////////
;#define XG_OFFS_TC 0x00
;#define YG_OFFS_TC 0x01
;#define ZG_OFFS_TC 0x02
;#define X_FINE_GAIN 0x03
;#define Y_FINE_GAIN 0x04
;#define Z_FINE_GAIN 0x05
;#define XA_OFFS_H 0x06
;#define XA_OFFS_L_TC 0x07
;#define YA_OFFS_H 0x08
;#define YA_OFFS_L_TC 0x09
;#define ZA_OFFS_H 0x0A
;#define ZA_OFFS_L_TC 0x0B
;#define XG_OFFS_USRH 0x13
;#define XG_OFFS_USRL 0x14
;#define YG_OFFS_USRH 0x15
;#define YG_OFFS_USRL 0x16
;#define ZG_OFFS_USRH 0x17
;#define ZG_OFFS_USRL 0x18
;#define SMPLRT_DIV 0x19
;#define CONFIG 0x1A
;#define GYRO_CONFIG 0x1B
;#define ACCEL_CONFIG 0x1C
;#define FF_THR 0x1D
;#define FF_DUR 0x1E
;#define MOT_THR 0x1F
;#define MOT_DUR 0x20
;#define ZRMOT_THR 0x21
;#define ZRMOT_DUR 0x22
;#define FIFO_EN 0x23
;#define I2C_MST_CTRL 0x24
;#define I2C_SLV0_ADDR 0x25
;#define I2C_SLV0_REG 0x26
;#define I2C_SLV0_CTRL 0x27
;#define I2C_SLV1_ADDR 0x28
;#define I2C_SLV1_REG 0x29
;#define I2C_SLV1_CTRL 0x2A
;#define I2C_SLV2_ADDR 0x2B
;#define I2C_SLV2_REG 0x2C
;#define I2C_SLV2_CTRL 0x2D
;#define I2C_SLV3_ADDR 0x2E
;#define I2C_SLV3_REG 0x2F
;#define I2C_SLV3_CTRL 0x30
;#define I2C_SLV4_ADDR 0x31
;#define I2C_SLV4_REG 0x32
;#define I2C_SLV4_DO 0x33
;#define I2C_SLV4_CTRL 0x34
;#define I2C_SLV4_DI 0x35
;#define I2C_MST_STATUS 0x36
;#define INT_PIN_CFG 0x37
;#define INT_ENABLE 0x38
;#define DMP_INT_STATUS 0x39
;#define INT_STATUS 0x3A
;#define ACCEL_XOUT_H 0x3B
;#define ACCEL_XOUT_L 0x3C
;#define ACCEL_YOUT_H 0x3D
;#define ACCEL_YOUT_L 0x3E
;#define ACCEL_ZOUT_H 0x3F
;#define ACCEL_ZOUT_L 0x40
;#define TEMP_OUT_H 0x41
;#define TEMP_OUT_L 0x42
;#define GYRO_XOUT_H 0x43
;#define GYRO_XOUT_L 0x44
;#define GYRO_YOUT_H 0x45
;#define GYRO_YOUT_L 0x46
;#define GYRO_ZOUT_H 0x47
;#define GYRO_ZOUT_L 0x48
;#define EXT_SENS_DATA_00 0x49
;#define EXT_SENS_DATA_01 0x4A
;#define EXT_SENS_DATA_02 0x4B
;#define EXT_SENS_DATA_03 0x4C
;#define EXT_SENS_DATA_04 0x4D
;#define EXT_SENS_DATA_05 0x4E
;#define EXT_SENS_DATA_06 0x4F
;#define EXT_SENS_DATA_07 0x50
;#define EXT_SENS_DATA_08 0x51
;#define EXT_SENS_DATA_09 0x52
;#define EXT_SENS_DATA_10 0x53
;#define EXT_SENS_DATA_11 0x54
;#define EXT_SENS_DATA_12 0x55
;#define EXT_SENS_DATA_13 0x56
;#define EXT_SENS_DATA_14 0x57
;#define EXT_SENS_DATA_15 0x58
;#define EXT_SENS_DATA_16 0x59
;#define EXT_SENS_DATA_17 0x5A
;#define EXT_SENS_DATA_18 0x5B
;#define EXT_SENS_DATA_19 0x5C
;#define EXT_SENS_DATA_20 0x5D
;#define EXT_SENS_DATA_21 0x5E
;#define EXT_SENS_DATA_22 0x5F
;#define EXT_SENS_DATA_23 0x60
;#define MOT_DETECT_STATUS 0x61
;#define I2C_SLV0_DO 0x63
;#define I2C_SLV1_DO 0x64
;#define I2C_SLV2_DO 0x65
;#define I2C_SLV3_DO 0x66
;#define I2C_MST_DELAY_CTRL 0x67
;#define SIGNAL_PATH_RESET 0x68
;#define MOT_DETECT_CTRL 0x69
;#define USER_CTRL 0x6A
;#define PWR_MGMT_1 0x6B
;#define PWR_MGMT_2 0x6C
;#define BANK_SEL 0x6D
;#define MEM_START_ADDR 0x6E
;#define MEM_R_W 0x6F
;#define DMP_CFG_1 0x70
;#define DMP_CFG_2 0x71
;#define FIFO_COUNTH 0x72
;#define FIFO_COUNTL 0x73
;#define FIFO_R_W 0x74
;#define WHO_AM_I 0x75
;
;
;
;///////////////////////////////////////////
;
;
;
;
;
;/////////
;
;float pi =3.14159;

	.DSEG
;float degs;
;float rads;
;float L,g;
;float sundia = 0.53;
;float airrefr = 34.0/60.0;
;float settm,riset,daytime,sunrise_min,sunset_min;
;
;///////////////////////////////////////////////////
;
;unsigned long int adc_buffer,timeout_cnt,target_angle,printkeycnt,calibusercnt,program_timeout;
;unsigned char hour,minute,second,week,day,month,year;
;bit key1_old,key2_old,key3_old,key4_old,start_fl,end_fl,inf_fl;
;//bit rcflag;
;bit key1_fl,key2_fl,key3_fl,key4_fl,printkey_fl,err_fl,led_blinkfl,sleep_fl;
;bit pgm_fl,blink_fl,adc_fl,read_adcfl,boost_fl,trickle_fl,float_fl;
;short int mode,set,item1,bright_cnt,angle_cnt,mode0_seqcnt,end_cnt,sleep_counter;
;int adc_pvolt,adc_battery,adc_angle;
;//short int ir_cnt;
;unsigned int time_cnt;
;unsigned int mode1_count,blink_count,display_cnt,manual_cnt;
;//unsigned long int boost_time,float_time;
;char blink_locx,blink_locy;
;char blink_data;
;signed int set_latit,set_longitude,angle,low_angle,high_angle,time_interval,target_time,time_elap,set_timezone;
;//int ircommand;
;//unsigned long irsense;
;long int zero_adc,span_adc;
;unsigned char char_latitude,char_longitude,char_timezone;
;//char record_buffer[16];
;eeprom signed int e_set_latit = 2650,e_set_longitude =7380,e_low_angle=500,e_high_angle=1250,e_time_interval=15,e_set_ti ...
;eeprom long int e_zero_adc =14000,e_span_adc=20000;
;eeprom unsigned char e_hour=12,e_minute=0,e_second=0,e_week=1,e_month=6,e_day=1,e_year=19;
;//flash int sunrise_time[] ={718,709,607,620,601,556,605,617,625,634,649,708};            //according to month
;//flash int sunset_time[]={1818,1836,1848,1857,1909,1921,1923,1908,1841,1814,1757,1759};   //according to month
;//flash int sunrise_min[]={438,429,407,380,361,356,365,377,385,394,409,428};
;//flash int sunset_min[]={1098,1116,1128,1137,1149,1161,1163,1148,1121,1094,1077,1079};
;//flash int daytime[]={659,687,720,757,788,804,798,771,736,700,668,651};
;bit calibuser,calibfact,manual_fl=0;
;//char flash *message1 = {"set the time"};
;short int xyz;
; void display_update(void);
;void rtc_int_fn(void);
;
;float Acc_x,Acc_y,Acc_z,Temperature,Gyro_x,Gyro_y,Gyro_z;
;
;
;
;/* table for the user defined character
;   arrow that points to the top right corner */
;flash char char0[8]={
;0b0001110,
;0b0010001,
;0b0010001,
;0b0001110,
;0b0000000,
;0b0000000,
;0b0000000,
;0b0000000};
;
;
;
;
;/* function used to define user characters */
;void define_char(char flash *pc,char char_code)
; 0000 0191 {

	.CSEG
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0192 char i,a;
; 0000 0193 a=(char_code<<3) | 0x40;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;	*pc -> Y+3
;	char_code -> Y+2
;	i -> R17
;	a -> R16
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0194 for (i=0; i<8; i++) lcd_write_byte(a++,*pc++);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0195 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;
;
;
;
;
;//void control_buck_on(void)
;//{
;//shutdown =1;
;//delay_ms(2);
;//TCCR1A |= 0x80;         // turn PWM on.
;//}
;//////*********
;
;float fnday(long y,long m,long d,float h)
; 0000 01A5             {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 01A6             long int luku = -7 *(y+(m+9)/12)/4 + 275*m/9 + d;
; 0000 01A7             luku+=(long int) y*367;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;	y -> Y+16
;	m -> Y+12
;	d -> Y+8
;	h -> Y+4
;	luku -> Y+0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 01A8             return (float)luku-730531.5 + h/24.0;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 01A9             }
;PCODE: $0000006A VOL: 0
;
;float fnrange(float x)
; 0000 01AC             {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 01AD             float b = 0.5 * x / pi;
; 0000 01AE             float a = 2.0 * pi * (b - (long) b);
; 0000 01AF             if (a<0) a = 2.0 * pi+a;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;	x -> Y+8
;	b -> Y+4
;	a -> Y+0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 01B0             return a;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 01B1             }
;PCODE: $00000090 VOL: 0
;
;
;float f0(float lat, float declin)
; 0000 01B5             {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 01B6             float f0,df0;
; 0000 01B7             df0 = rads *(0.5*sundia + airrefr);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;	lat -> Y+12
;	declin -> Y+8
;	f0 -> Y+4
;	df0 -> Y+0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 01B8             if (lat <0.0) df0 = -df0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 01B9             f0 = tan(declin+df0) * tan(lat*rads);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 01BA             if (f0>0.99999) f0 = 1.0;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 01BB             f0 = asin(f0) + pi/2.0;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 01BC             return f0;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 01BD             }
;PCODE: $000000C5 VOL: 0
;
;
;float fnsun(float d)
; 0000 01C1             {
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 01C2             L = fnrange(280.461* rads + 0.9856474 * rads * d);
;PCODE: $000000C8 VOL: 0
;	d -> Y+0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 01C3             g = fnrange(357.528 * rads + 0.9856003 * rads * d);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 01C4 
; 0000 01C5             return fnrange(L+1.915 * rads * sin(g) + 0.02 * rads * sin(2*g));
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 01C6             }
;PCODE: $00000101 VOL: 0
;
;void rise_set( float day,float m,float y,float h,float latit,float longit,float tzone)
; 0000 01C9 {
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 01CA float d,lamda;
; 0000 01CB float obliq,alpha,delta,LL,equation,ha;
; 0000 01CC degs = 180.0/pi;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;	day -> Y+56
;	m -> Y+52
;	y -> Y+48
;	h -> Y+44
;	latit -> Y+40
;	longit -> Y+36
;	tzone -> Y+32
;	d -> Y+28
;	lamda -> Y+24
;	obliq -> Y+20
;	alpha -> Y+16
;	delta -> Y+12
;	LL -> Y+8
;	equation -> Y+4
;	ha -> Y+0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 01CD rads = pi/180.0;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 01CE h=12;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 01CF d= fnday (y,m,day,h);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 01D0 lamda = fnsun(d);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 01D1 obliq = 23.439 * rads - 0.0000004 * rads *d;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 01D2 alpha =atan2(cos(obliq) * sin(lamda),cos(lamda));
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 01D3 delta = asin(sin(obliq) * sin(lamda));
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 01D4 
; 0000 01D5 LL = L-alpha;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 01D6 if (L<pi) LL+= 2.0 * pi;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 01D7 equation = 1440.0 * (1.0 - LL/pi/2.0);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 01D8 ha = f0(latit,delta);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 01D9 riset = 12.0 - 12.0 * ha/pi +tzone - longit/15.0 +equation/60.0;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 01DA settm = 12.0 + 12.0 * ha/pi +tzone - longit/15.0 + equation/60.0;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 01DB if (riset > 24.0) riset =riset -24.0;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 01DC if (settm > 24.0) settm =settm -24.0;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 01DD sunrise_min = riset * 60;       //rise time in minutes
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 01DE sunset_min = settm * 60;        //set time in minutes
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 01DF daytime = sunset_min - sunrise_min ;   //day time in minutes
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 01E0 }
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;
;/////*********
;
;
;//void print_realtime(void);
;
;void clear_to_default()
; 0000 01E8 {
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 01E9 if (mode!=0)
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 01EA     {
; 0000 01EB                 mode1_count =0;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 01EC                 mode =0;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 01ED                 pgm_fl =0;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 01EE                 blink_fl =0;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 01EF                 set =0;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 01F0                 item1 =0;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 01F1                 lcd_clear();
;PCODE: $000001C8 VOL: 0
; 0000 01F2                 delay_ms(10);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 01F3     }
; 0000 01F4 if (manual_fl)
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 01F5     {
; 0000 01F6             manual_fl =0;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 01F7             lcd_clear();
;PCODE: $000001D3 VOL: 0
; 0000 01F8             lcd_putsf("manual mode");
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 01F9             lcd_gotoxy(0,1);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 01FA             lcd_putsf("exiting...");
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 01FB             delay_ms(2000);
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 01FC 
; 0000 01FD     }
; 0000 01FE }
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;
;int to_minute(char hr,char min)
; 0000 0201 {
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0202 return (hr*60 + min);
;PCODE: $000001E5 VOL: 0
;	hr -> Y+1
;	min -> Y+0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0203 }
;PCODE: $000001EF VOL: 0
;
;
;
;void put_message(long int a)
; 0000 0208 {
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0209 char b[5];
; 0000 020A if (a <0)
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;	a -> Y+5
;	b -> Y+0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 020B {
; 0000 020C lcd_putchar('-');
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 020D a = -a;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 020E }
; 0000 020F else
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0210 {
; 0000 0211 lcd_putchar(' ');
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0212 }
;PCODE: $00000200 VOL: 0
; 0000 0213 b[0] = a % 10 + 48;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0214 a = a/10;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0215 b[1] = a % 10 + 48;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0216 a = a/10;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0217 b[2] = a % 10 + 48;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0218 a = a/10;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0219 b[3] = a % 10 + 48;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 021A a = a/10;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 021B b[4] = a + 48;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 021C lcd_putchar(b[4]);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 021D lcd_putchar(b[3]);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 021E lcd_putchar(b[2]);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 021F lcd_putchar(b[1]);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0220 lcd_putchar(b[0]);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0221 
; 0000 0222 
; 0000 0223 }
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;
;void put_message2(unsigned char a)
; 0000 0226 {
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0227 char b[2];
; 0000 0228 b[0] = a % 10 + 48;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;	a -> Y+2
;	b -> Y+0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0229 a = a/10;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 022A b[1] = a + 48;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 022B lcd_putchar(b[1]);
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 022C lcd_putchar(b[0]);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 022D }
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;
;void put_message3(unsigned int a)
; 0000 0230 {
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0231 char b[3];
; 0000 0232 b[0] = (a %10) + 48;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;	a -> Y+3
;	b -> Y+0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0233 a = a/10;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0234 b[1] = (a %10) + 48;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0235 a = a/10;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0236 b[2] = a + 48;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0237 lcd_putchar(b[2]);
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0238 lcd_putchar(b[1]);
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 0239 lcd_putchar(b[0]);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 023A }
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;
;void blink_control(void)
; 0000 023D {
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 023E if (blink_fl)
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 023F {
; 0000 0240  blink_count++;
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0241  if (blink_count >=200) blink_count =0;
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 0242 
; 0000 0243  if (blink_count >=150)
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0244  {
; 0000 0245  lcd_gotoxy(blink_locx,blink_locy);
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 0246  lcd_putsf("  ");
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 0247  }
; 0000 0248  else
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 0249  {
; 0000 024A  lcd_gotoxy(blink_locx,blink_locy);
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 024B  put_message2(blink_data);
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 024C  }
;PCODE: $0000028F VOL: 0
; 0000 024D 
; 0000 024E 
; 0000 024F 
; 0000 0250  }
; 0000 0251  }
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;
;void display_time(void)
; 0000 0254 {
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 0255       put_message2(hour);
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 0256       lcd_putchar(':');
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 0257       put_message2(minute);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0258       lcd_putchar(':');
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 0259       put_message2(second);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 025A }
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;
;void display_latlong(signed int l)
; 0000 025D {
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 025E unsigned int m;
; 0000 025F if (l<0)
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;	l -> Y+2
;	m -> R16,R17
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 0260 lcd_putchar('-');
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 0261 else
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 0262 lcd_putchar('+');
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 0263 m = abs(l);
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 0264 put_message3(m/100);
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0265 lcd_putchar('.');
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 0266 put_message2(m%100);
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 0267 }
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;
;/*
;void display_time2(int t)
;{
;    put_message2(t/100);
;    lcd_putchar(':');
;    put_message2((t%100)*6/10);
;}
;*/
;
;void display_date(void)
; 0000 0273 {
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0274       put_message2(day);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0275       lcd_putchar('.');
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0276       put_message2(month);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0277       lcd_putchar('.');
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0278       lcd_putsf("20");
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0279       put_message2(year);
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 027A }
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;
;/*
;void display_day(int data)
;{
;char a;
;a = data /100;
;put_message2(a);
;lcd_putsf(":");
;a = data%100;
;put_message2(a);
;}
;*/
;
;void display_day2(int data)
; 0000 0289 {
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 028A char a;
; 0000 028B a = data /60;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;	data -> Y+1
;	a -> R17
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 028C put_message2(a);
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 028D lcd_putsf(":");
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 028E a = data%60;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 028F put_message2(a);
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0290 }
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;
;void display_analog(int a)
; 0000 0293 {
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 0294     put_message2(a/100);
;PCODE: $000002F1 VOL: 0
;	a -> Y+0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0295     lcd_putchar('.');
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0296     put_message2(a%100);
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 0297 }
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;
;void display_angle(int a)
; 0000 029A {
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 029B char x,y;
; 0000 029C y = a/10;
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;	a -> Y+2
;	x -> R17
;	y -> R16
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 029D x = y%100;
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 029E y = y/100;
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 029F lcd_putchar(y+48);
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 02A0 put_message2(x);
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 02A1 
; 0000 02A2 lcd_putchar('.');
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 02A3 x = a%10;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 02A4 
; 0000 02A5 lcd_putchar(x+48);
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 02A6 lcd_putchar(0);
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 02A7 }
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;
;void display_angle1(int a)
; 0000 02AA {
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 02AB char x,y;
; 0000 02AC y = a/10;
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;	a -> Y+2
;	x -> R17
;	y -> R16
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 02AD x = y%100;
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 02AE y = y/100;
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 02AF lcd_putchar(y+48);
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 02B0 put_message2(x);
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 02B1 
; 0000 02B2 lcd_putchar('.');
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 02B3 x = a%10;
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 02B4 
; 0000 02B5 lcd_putchar(x+48);
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 02B6 lcd_putchar(0);
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 02B7 }
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;
;
;void check_mode(void)
; 0000 02BB {
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 02BC //key1 =1;
; 0000 02BD if (!key1)
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 02BE     {
; 0000 02BF     bright_cnt =0;
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
; 0000 02C0     program_timeout=0;
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 02C1         mode1_count++;
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 02C2         if (mode1_count >= 1000)
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 02C3         {
; 0000 02C4             if (mode == 0)
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 02C5             {
; 0000 02C6                 mode1_count=0;
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 02C7                 mode =1;
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 02C8                 pgm_fl =1;
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 02C9 //                lcd_gotoxy(0,0);
; 0000 02CA                 lcd_clear();
;PCODE: $0000036F VOL: 0
; 0000 02CB                 lcd_putsf("set the time");
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 02CC                 lcd_gotoxy(0,1);
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 02CD                 display_time();
;PCODE: $00000377 VOL: 0
; 0000 02CE                 blink_data = hour;
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 02CF                 blink_locx =0;
;PCODE: $0000037A VOL: 0
; 0000 02D0                 blink_locy =1;
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 02D1                 blink_fl =1;
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 02D2                 set =0;
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 02D3                 item1 =0;
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 02D4             }
; 0000 02D5             else
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 02D6             {
; 0000 02D7                 mode1_count =0;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 02D8                 mode =0;
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0000 02D9                 pgm_fl =0;
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 02DA                 blink_fl =0;
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 02DB                 set =0;
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 02DC                 item1 =0;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 02DD                 lcd_clear();
;PCODE: $00000394 VOL: 0
; 0000 02DE                 delay_ms(10);
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 02DF             }
;PCODE: $00000398 VOL: 0
; 0000 02E0         }
; 0000 02E1     }
;PCODE: $00000399 VOL: 0
; 0000 02E2 else
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 02E3     mode1_count =0;
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 02E4 
; 0000 02E5 //////manual mode key check
; 0000 02E6 if (!key4)
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 02E7 {
; 0000 02E8 manual_cnt++;
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 02E9 if (manual_cnt > 2000)
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 02EA         {
; 0000 02EB         manual_cnt =0;
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 02EC         if (!manual_fl)
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 02ED             {
; 0000 02EE             manual_fl =1;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 02EF             lcd_clear();
;PCODE: $000003B1 VOL: 0
; 0000 02F0             lcd_putsf("manual mode");
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 02F1             lcd_gotoxy(0,1);
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 02F2             lcd_putsf("entering....");
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 02F3             delay_ms(2000);
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 02F4             }
; 0000 02F5         else
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 02F6             {
; 0000 02F7             manual_fl =0;
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 02F8             lcd_clear();
;PCODE: $000003C3 VOL: 0
; 0000 02F9             lcd_putsf("manual mode");
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 02FA             lcd_gotoxy(0,1);
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 02FB             lcd_putsf("exiting...");
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 02FC             delay_ms(2000);
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 02FD             }
;PCODE: $000003D0 VOL: 0
; 0000 02FE 
; 0000 02FF         }
; 0000 0300 
; 0000 0301 }
;PCODE: $000003D1 VOL: 0
; 0000 0302 
; 0000 0303 
; 0000 0304 
; 0000 0305 //////////////////////////
; 0000 0306 
; 0000 0307 
; 0000 0308 
; 0000 0309 }
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;
;void check_increment(void)
; 0000 030C {
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0000 030D if (key2_fl && pgm_fl)
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 030E {
; 0000 030F     key2_fl =0;
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 0310         bright_cnt =0;
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 0311         program_timeout=0;
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0000 0312 
; 0000 0313     if (mode ==1)
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 0314     {
; 0000 0315 //    while(1);
; 0000 0316     switch (item1)
;PCODE: $000003EB VOL: 0
; 0000 0317     {
; 0000 0318         case 0: hour++;
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0000 0319                 if (hour > 24) hour =0;
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 031A                 break;
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 031B         case 1: minute++;
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 031C                 if (minute > 59) minute =0;
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 031D                 break;
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 031E         case 2: second++;
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
; 0000 031F                 if (second >59) second =0;
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 0320                 break;
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 0321         case 3: day++;
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 0322                 if (day > 31) day =1;
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 0323                 break;
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0000 0324         case 4: month++;
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 0325                 if (month > 12) month = 1;
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 0326                 break;
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
; 0000 0327         case 5: year++;
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 0328                 if (year >99) year = 13;
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 0329                 break;
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 032A         case 6: set_latit+=100;
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 032B                 if (set_latit > 9000) set_latit =9000;
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 032C                 char_latitude = blink_data = abs(set_latit)/100;
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 032D                 break;
;PCODE: $0000043D VOL: 0
; 0000 032E         case 7: set_latit+=1;
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 032F                 if (set_latit > 9000) set_latit =9000;
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 0330                 char_latitude = blink_data = abs(set_latit)%100;
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 0331                 break;
;PCODE: $00000451 VOL: 0
; 0000 0332         case 8: set_longitude+=100;
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 0333                 if (set_longitude > 18000) set_longitude = 18000;
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 0334                 char_longitude = blink_data = (abs(set_longitude)/100)%100;
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0000 0335                 break;
;PCODE: $00000468 VOL: 0
; 0000 0336         case 9: set_longitude+=1;
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0000 0337                 if (set_longitude > 18000) set_longitude = 18000;
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0000 0338                 char_longitude = blink_data = abs(set_longitude)%100;
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 0339                 break;
;PCODE: $0000047C VOL: 0
; 0000 033A         case 10:time_interval+=5;
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 033B                 if (time_interval > 90) time_interval = 5;
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 033C                 break;
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0000 033D         case 11: set_timezone+=100;
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
; 0000 033E                 if(set_timezone > 1200) set_timezone = 1200;
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 033F                 break;
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0000 0340         case 12: set_timezone+=25;
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0000 0341                 if(set_timezone > 1200) set_timezone = 1200;
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 0342                 break;
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0000 0343        }
;PCODE: $000004A4 VOL: 0
; 0000 0344 
; 0000 0345     }
; 0000 0346 
; 0000 0347 
; 0000 0348 }
;PCODE: $000004A5 VOL: 0
; 0000 0349 }
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;
;void check_decrement(void)
; 0000 034C {
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 034D if (key3_fl && pgm_fl)
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 034E {
; 0000 034F     bright_cnt =0;
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 0350     program_timeout=0;
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 0351     key3_fl =0;
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0000 0352     if (mode ==1)
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
; 0000 0353     {
; 0000 0354     switch (item1)
;PCODE: $000004BF VOL: 0
; 0000 0355     {
; 0000 0356         case 0: hour--;
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0000 0357                 if (hour > 23) hour =23;
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 0358                 break;
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 0359         case 1: minute--;
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 035A                 if (minute > 59) minute =59;
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
; 0000 035B                 break;
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
; 0000 035C         case 2: second--;
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
; 0000 035D                 if (second > 59) second =59;
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0000 035E                 break;
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
; 0000 035F         case 3: day--;
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 0360                 if (day <1) day =31;
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
; 0000 0361                 break;
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
; 0000 0362         case 4: month--;
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
; 0000 0363                 if (month <1) month = 12;
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
; 0000 0364                 break;
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
; 0000 0365         case 5: year--;
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
; 0000 0366                 if (year >99) year = 99;
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
; 0000 0367                 break;
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 0368         case 6: set_latit-=100;
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
; 0000 0369                 if (set_latit <-9000) set_latit =-9000;
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0000 036A                 char_latitude = blink_data = abs(set_latit)/100;
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 036B                 break;
;PCODE: $00000514 VOL: 0
; 0000 036C         case 7: set_latit-=1;
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
; 0000 036D                 if (set_latit <-9000) set_latit =-9000;
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
; 0000 036E                 char_latitude = blink_data = abs(set_latit)%100;
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
; 0000 036F                 break;
;PCODE: $00000528 VOL: 0
; 0000 0370         case 8: set_longitude-=100;
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
; 0000 0371                 if (set_longitude <-18000) set_longitude =-18000;
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 0372                 char_longitude = blink_data = (abs(set_longitude)/100)%100;
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
; 0000 0373                 break;
;PCODE: $0000053F VOL: 0
; 0000 0374         case 9: set_longitude-=1;
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
; 0000 0375                 if (set_longitude <-18000) set_longitude =-18000;
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 0376                 char_longitude = blink_data = abs(set_longitude)%100;
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
; 0000 0377                 break;
;PCODE: $00000553 VOL: 0
; 0000 0378         case 10:time_interval-=5;
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
; 0000 0379                 if(time_interval<5) time_interval =90;
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
; 0000 037A                 break;
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
; 0000 037B         case 11: set_timezone-=100;
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
; 0000 037C                 if(set_timezone < -1200) set_timezone = -1200;
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
; 0000 037D                 break;
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
; 0000 037E         case 12: set_timezone-=25;
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
; 0000 037F                 if(set_timezone < -1200) set_timezone = -1200;
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
; 0000 0380                 break;
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0000 0381     }
;PCODE: $0000057B VOL: 0
; 0000 0382 
; 0000 0383     }
; 0000 0384 
; 0000 0385 
; 0000 0386 }
;PCODE: $0000057C VOL: 0
; 0000 0387 }
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;
;void check_shift(void)
; 0000 038A {
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
; 0000 038B if (key4_fl && pgm_fl)
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
; 0000 038C {
; 0000 038D     bright_cnt =0;
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0000 038E     program_timeout=0;
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
; 0000 038F     key4_fl =0;
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
; 0000 0390     if (mode ==1)
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
; 0000 0391     {
; 0000 0392     item1++;
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 0393     if (set ==0 && item1>2) item1=0;
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 0394     if (set ==1 && (item1 <3 || item1 >5)) item1 =3;
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
; 0000 0395     if (set ==2 && (item1 <6 || item1 >7)) item1 =6;
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
; 0000 0396     if (set ==3 && (item1 <8 || item1 >9)) item1 =8;
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
; 0000 0397     if (set ==4) item1 =10;
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
; 0000 0398     if (set ==5 && (item1 <11 || item1 >12)) item1 = 11;
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
; 0000 0399 
; 0000 039A    }
;PCODE: $000005F4 VOL: 0
; 0000 039B 
; 0000 039C }
;PCODE: $000005F5 VOL: 0
; 0000 039D }
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;
;void check_enter(void)
; 0000 03A0 {
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
; 0000 03A1 
; 0000 03A2 if (key1_fl && pgm_fl)
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
; 0000 03A3 {
; 0000 03A4     bright_cnt =0;
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
; 0000 03A5     program_timeout=0;
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
; 0000 03A6     key1_fl =0;
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
; 0000 03A7     if (mode ==1)
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
; 0000 03A8     {
; 0000 03A9     switch(set)
;PCODE: $0000060F VOL: 0
; 0000 03AA     {
; 0000 03AB     case 0: rtc_set_time(hour,minute,second);
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
; 0000 03AC             break;
;PCODE: $00000616 VOL: 0
; 0000 03AD     case 1: rtc_set_date(week,day,month,year);   // pdi is week day not used.
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
; 0000 03AE             break;
;PCODE: $0000061F VOL: 0
; 0000 03AF     case 2: e_set_latit = set_latit;
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
; 0000 03B0             break;
;PCODE: $00000626 VOL: 0
; 0000 03B1     case 3: e_set_longitude = set_longitude;
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
; 0000 03B2             break;
;PCODE: $0000062D VOL: 0
; 0000 03B3     case 4: e_time_interval = time_interval;
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
; 0000 03B4             break;
;PCODE: $00000634 VOL: 0
; 0000 03B5     case 5: e_set_timezone = set_timezone;
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
; 0000 03B6     }
;PCODE: $0000063B VOL: 0
; 0000 03B7 
; 0000 03B8     set++;
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
; 0000 03B9     if (set>5)  set =0;
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
; 0000 03BA 
; 0000 03BB     switch (set)
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
; 0000 03BC     {
; 0000 03BD     case 0:     lcd_clear();
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
; 0000 03BE                 lcd_putsf("Set Time");
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
; 0000 03BF                 rtc_get_time(&hour,&minute,&second);
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
; 0000 03C0 //                if (hour <0 || hour >24) rtc_err=1;         //added for rtc error
; 0000 03C1                 lcd_gotoxy(0,1);
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
; 0000 03C2                 display_time();
;PCODE: $00000657 VOL: 0
; 0000 03C3                 blink_data = hour;
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
; 0000 03C4                 blink_locx =0;
;PCODE: $0000065A VOL: 0
; 0000 03C5                 blink_locy =1;
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
; 0000 03C6                 blink_fl =1;
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
; 0000 03C7                 set =0;
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
; 0000 03C8                 item1 =0;
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
; 0000 03C9                 break;
;PCODE: $00000664 VOL: 0
; 0000 03CA 
; 0000 03CB     case 1:     lcd_clear();
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
; 0000 03CC                 lcd_putsf("Set Date");
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
; 0000 03CD                 rtc_get_date(&week,&day,&month,&year);   // pdi is weekday not used only for cvavr2.05.
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
; 0000 03CE                 lcd_gotoxy(0,1);
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
; 0000 03CF                 display_date();
;PCODE: $00000678 VOL: 0
; 0000 03D0                 blink_data = day;
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
; 0000 03D1                 blink_locx =0;
;PCODE: $0000067B VOL: 0
; 0000 03D2                 blink_locy =1;
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
; 0000 03D3                 blink_fl =1;
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
; 0000 03D4                 set =1;
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
; 0000 03D5                 item1 = 3;
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
; 0000 03D6                 break;
;PCODE: $00000685 VOL: 0
; 0000 03D7     case 2:     lcd_clear();
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
; 0000 03D8                 lcd_putsf("Set Latitude");
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
; 0000 03D9                 set_latit = e_set_latit;
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
; 0000 03DA                 lcd_gotoxy(0,1);
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
; 0000 03DB                 display_latlong(set_latit);
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
; 0000 03DC                 lcd_putchar(0);
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
; 0000 03DD                 char_latitude = blink_data = (abs(set_latit)/100)%100 ;
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
; 0000 03DE                 blink_locx =2;
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
; 0000 03DF                 blink_locy =1;
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
; 0000 03E0                 blink_fl =1;
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
; 0000 03E1                 set =2;
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
; 0000 03E2                 item1 =6;
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
; 0000 03E3                 break;
;PCODE: $000006AD VOL: 0
; 0000 03E4     case 3:     lcd_clear();
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
; 0000 03E5                 lcd_putsf("Set Longitude");
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
; 0000 03E6                 set_longitude = e_set_longitude;
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
; 0000 03E7                 lcd_gotoxy(0,1);
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
; 0000 03E8                 display_latlong(set_longitude);
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
; 0000 03E9                 lcd_putchar(0);
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
; 0000 03EA                 char_longitude = blink_data = (abs(set_longitude)/100)%100 ;
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
; 0000 03EB                 blink_locx =2;
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
; 0000 03EC                 blink_locy =1;
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
; 0000 03ED                 blink_fl =1;
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
; 0000 03EE                 set =3;
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
; 0000 03EF                 item1 =8;
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
; 0000 03F0                 break;
;PCODE: $000006D5 VOL: 0
; 0000 03F1     case 4:     lcd_clear();
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
; 0000 03F2                 lcd_putsf("Time Interval ");
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
; 0000 03F3                 e_time_interval = time_interval;
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
; 0000 03F4                 lcd_gotoxy(0,1);
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
; 0000 03F5                 put_message2(time_interval);
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
; 0000 03F6                 lcd_putsf(" minutes");
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
; 0000 03F7                 blink_data = time_interval;
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
; 0000 03F8                 blink_locx =0;
;PCODE: $000006EB VOL: 0
; 0000 03F9                 blink_locy =1;
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
; 0000 03FA                 blink_fl =1;
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
; 0000 03FB                 set =4;
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
; 0000 03FC                 item1 =10;
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
; 0000 03FD                 break;
;PCODE: $000006F5 VOL: 0
; 0000 03FE     case 5:     lcd_clear();
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
; 0000 03FF                 lcd_putsf("Set Timezone");
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
; 0000 0400                 set_timezone = e_set_timezone;
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
; 0000 0401                 lcd_gotoxy(0,1);
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
; 0000 0402                 lcd_putsf("GMT ");
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
; 0000 0403                 display_latlong(set_timezone);
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
; 0000 0404                 lcd_putsf("Hrs.");
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
; 0000 0405                 char_timezone = blink_data = (abs(set_timezone)/100)%100 ;
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
; 0000 0406                 blink_locx =6;
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
; 0000 0407                 blink_locy =1;
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
; 0000 0408                 blink_fl =1;
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
; 0000 0409                 set =5;
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
; 0000 040A                 item1 =11;
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
; 0000 040B                 break;
;PCODE: $00000721 VOL: 0
; 0000 040C     }
;PCODE: $00000722 VOL: 0
; 0000 040D 
; 0000 040E     }
; 0000 040F 
; 0000 0410 }
;PCODE: $00000723 VOL: 0
; 0000 0411 }
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;
;void get_key(void)
; 0000 0414 {
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
; 0000 0415 if (!key1 && key1_old) key1_fl =1;
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
; 0000 0416 if (!key2 && key2_old) key2_fl =1;
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
; 0000 0417 if (!key3 && key3_old) key3_fl =1;
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
; 0000 0418 if (!key4 && key4_old) key4_fl =1;
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
; 0000 0419 
; 0000 041A key1_old = key1;
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
;PCODE: $00000764 VOL: 0
; 0000 041B key2_old = key2;
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
; 0000 041C key3_old = key3;
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
; 0000 041D key4_old = key4;
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
; 0000 041E if (!key3 && mode==0 && !manual_fl)
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
; 0000 041F {
; 0000 0420 printkeycnt++;
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
; 0000 0421 if (printkeycnt >=4000)
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
; 0000 0422             {
; 0000 0423             printkeycnt=0;
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
; 0000 0424             printkey_fl =1;
;PCODE: $00000787 VOL: 0
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
; 0000 0425             }
; 0000 0426 }
;PCODE: $0000078A VOL: 0
; 0000 0427 else
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
; 0000 0428 printkeycnt=0;
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
; 0000 0429 
; 0000 042A if (!key2 && !manual_fl)              //calibuser calibration mode enter
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
; 0000 042B             {
; 0000 042C             calibusercnt++;
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
; 0000 042D             if(calibusercnt >=2000)
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
; 0000 042E                         {
; 0000 042F                         calibusercnt=0;
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
; 0000 0430                         calibuser=1;            //enter calibration mode for user
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
; 0000 0431                         lcd_clear();
;PCODE: $000007A6 VOL: 0
; 0000 0432                         lcd_putsf("Calibration Mode");
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
; 0000 0433                         lcd_gotoxy(0,1);
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
; 0000 0434                         lcd_putsf("entering");
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
; 0000 0435                         delay_ms(2000);
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
; 0000 0436                         }
; 0000 0437             }
;PCODE: $000007B3 VOL: 0
; 0000 0438 else
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
; 0000 0439 calibusercnt=0;
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
; 0000 043A }
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;
;
; void adc3421_init(void)
; 0000 043E {
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
; 0000 043F i2c_start();
;PCODE: $000007BD VOL: 0
; 0000 0440 i2c_write(0xd2);
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
; 0000 0441 delay_ms(1);
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
; 0000 0442 //i2c_write(0x9f);   //18 bit mode 8v/v
; 0000 0443 i2c_write(0x9b);        //16 bit 8v/v
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
; 0000 0444 i2c_stop();
;PCODE: $000007C5 VOL: 0
; 0000 0445 }
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
;
;
;int adc3421_read(void)
; 0000 0449 {
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
; 0000 044A  unsigned int buffer1;
; 0000 044B  unsigned int buffer2;
; 0000 044C signed int buffer4;
; 0000 044D  i2c_start();
;PCODE: $000007CA VOL: 0
;	buffer1 -> R16,R17
;	buffer2 -> R18,R19
;	buffer4 -> R20,R21
;PCODE: $000007CB VOL: 0
; 0000 044E  buffer1 = i2c_write(0xd3);
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
;PCODE: $000007CF VOL: 0
; 0000 044F  buffer1 = i2c_read(1);
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
; 0000 0450  buffer2 = i2c_read(0);
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
; 0000 0451  i2c_stop();
;PCODE: $000007D8 VOL: 0
; 0000 0452  //buffer1 = buffer1 & 0x7f;      //ignore sign bit
; 0000 0453  //buffer4 = (long)(buffer1) * 256);
; 0000 0454  //buffer4 = buffer4 + (long)(buffer2);
; 0000 0455  buffer4 = (buffer1 *256) + buffer2;
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
; 0000 0456 if (buffer4<0) buffer4 = -buffer4;
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
; 0000 0457  return(buffer4);
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
; 0000 0458 }
;PCODE: $000007E7 VOL: 0
;
;//////////////////////////6050 files/////////////////
;void MPU6050_Init()										/* Gyro initialization function */
; 0000 045C {
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
; 0000 045D 	delay_ms(150);										/* Power up time >100ms */
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
; 0000 045E 	i2c_start();
;PCODE: $000007ED VOL: 0
; 0000 045F     i2c_write(0xD2);								/* Start with device write address */
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
; 0000 0460 	i2c_write(SMPLRT_DIV);								/* Write to sample rate register */
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
; 0000 0461 	i2c_write(0x07);									/* 1KHz sample rate */
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
; 0000 0462 	i2c_stop();
;PCODE: $000007F4 VOL: 0
; 0000 0463 
; 0000 0464 	i2c_start();
;PCODE: $000007F5 VOL: 0
; 0000 0465     i2c_write(0xD2);
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
; 0000 0466 	i2c_write(PWR_MGMT_1);								/* Write to power management register */
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
; 0000 0467 	i2c_write(0x01);									/* X axis gyroscope reference frequency */
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
; 0000 0468 	i2c_stop();
;PCODE: $000007FC VOL: 0
; 0000 0469 
; 0000 046A 	i2c_start();
;PCODE: $000007FD VOL: 0
; 0000 046B     i2c_write(0xD2);
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
; 0000 046C 	i2c_write(CONFIG);									/* Write to Configuration register */
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
; 0000 046D 	i2c_write(0x00);									/* Fs = 8KHz */
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
; 0000 046E 	i2c_stop();
;PCODE: $00000804 VOL: 0
; 0000 046F 
; 0000 0470 	i2c_start();
;PCODE: $00000805 VOL: 0
; 0000 0471     i2c_write(0xD2);
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
; 0000 0472 	i2c_write(GYRO_CONFIG);								/* Write to Gyro configuration register */
;PCODE: $00000808 VOL: 0
;PCODE: $00000809 VOL: 0
; 0000 0473 	i2c_write(0x18);									/* Full scale range +/- 2000 degree/C */
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
; 0000 0474 	i2c_stop();
;PCODE: $0000080C VOL: 0
; 0000 0475 
; 0000 0476 	i2c_start();
;PCODE: $0000080D VOL: 0
; 0000 0477     i2c_write(0xD2);
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
; 0000 0478     i2c_write(INT_ENABLE);								/* Write to interrupt enable register */
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
; 0000 0479 	i2c_write(0x01);
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
; 0000 047A 	i2c_stop();
;PCODE: $00000814 VOL: 0
; 0000 047B }
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;
;void MPU_Start_Loc()
; 0000 047E {
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0
; 0000 047F 	i2c_start();
;PCODE: $00000819 VOL: 0
; 0000 0480     i2c_write(0xD2);								/* I2C start with device write address */
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
; 0000 0481 	i2c_write(ACCEL_XOUT_H);							/* Write start location address from where to read */
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
; 0000 0482 	i2c_start();
;PCODE: $0000081E VOL: 0
; 0000 0483     i2c_write(0xD3);							/* I2C start with device read address */
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
; 0000 0484 }
;PCODE: $00000821 VOL: 0
;PCODE: $00000822 VOL: 0
;
;void Read_RawValue()
; 0000 0487 {
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
; 0000 0488 	MPU_Start_Loc();									/* Read Gyro values */
;PCODE: $00000825 VOL: 0
; 0000 0489 	Acc_x = (((int)i2c_read(1)<<8) | (int)i2c_read(1));
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
; 0000 048A 	Acc_y = (((int)i2c_read(1)<<8) | (int)i2c_read(1));
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
; 0000 048B 	Acc_z = (((int)i2c_read(1)<<8) | (int)i2c_read(1));
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
; 0000 048C 	Temperature = (((long)i2c_read(1)<<8) | (long)i2c_read(1));
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
; 0000 048D 	Gyro_x = (((long)i2c_read(1)<<8) | (long)i2c_read(1));
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
; 0000 048E 	Gyro_y = (((long)i2c_read(1)<<8) | (long)i2c_read(1));
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
; 0000 048F 	Gyro_z = (((long)i2c_read(1)<<8) | (long)i2c_read(0));
;PCODE: $00000877 VOL: 0
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
; 0000 0490 	i2c_stop();
;PCODE: $00000886 VOL: 0
; 0000 0491 }
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;
;
;
;
;
;///////////////////////////////////////////////////
;
;
;void read_adc(void)
; 0000 049B {
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
; 0000 049C if(adc_fl)
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
; 0000 049D         {
; 0000 049E //        adc_angle = adc3421_read();
; 0000 049F //        adc_angle = 15000;
; 0000 04A0         adc_fl =0;
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
; 0000 04A1         read_adcfl =1;
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
; 0000 04A2         Read_RawValue();
;PCODE: $00000894 VOL: 0
; 0000 04A3         }
; 0000 04A4 
; 0000 04A5 }
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;
;
;/*
;void get_irkey(void)
;{
;// ir sensing
;if (rcflag)
;{
;rcflag =0;
;ircommand = irsense & 0x0f;
;switch(ircommand)
;    {
;    case 0:     mode =1;
;                pgm_fl =1;
;//                lcd_gotoxy(0,0);
;                lcd_clear();
;                lcd_putsf("set the time");
;                lcd_gotoxy(0,1);
;                display_time();
;                blink_data = hou;
;                blink_locx =0;
;                blink_locy =1;
;                blink_fl =1;
;                set =0;
;                item1 =0;
;                break;
;    case 1:     calibfact = calibuser =0;
;                mode =0;
;                pgm_fl =0;
;                blink_fl =0;
;                set =0;
;                item1 =0;
;                lcd_clear();
;                delay_ms(10);
;                break;
;    case 2:     key1_fl =1;
;                key2_fl = key3_fl = key4_fl =0;
;                break;
;    case 3:     key4_fl=1;
;                key1_fl = key2_fl = key3_fl =0;
;                break;
;    case 4:    key2_fl=1;
;               key1_fl = key4_fl = key3_fl =0;
;
;                break;
;    case 5:    key3_fl=1;
;                    key1_fl = key2_fl = key4_fl =0;
;
;                break;
;    case 6:     calibuser =1;
;                calibfact =0;
;                lcd_putsf("the panel ");
;                lcd_gotoxy(0,1);
;                lcd_putsf("calibration mode");
;                delay_ms(3000);
;                lcd_gotoxy(0,0);
;                lcd_putsf("inc > inch up");
;                lcd_gotoxy(0,1);
;                lcd_putsf("dec > inch down");
;                delay_ms(3000);
;                lcd_gotoxy(0,0);
;                lcd_putsf("set > enter low");
;                lcd_gotoxy(0,1);
;                lcd_putsf("shf-> enter high");
;                delay_ms(3000);
;                break;
;    }
;
;
;
;
;}
;
;
;}
;*/
;
;void display_update(void)
; 0000 04F4 {
;PCODE: $00000898 VOL: 0
;PCODE: $00000899 VOL: 0
; 0000 04F5 
; 0000 04F6 if (mode ==0 && !manual_fl)
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
; 0000 04F7         {
; 0000 04F8         lcd_clear();
;PCODE: $000008A4 VOL: 0
; 0000 04F9         mode0_seqcnt++;
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
; 0000 04FA         if (mode0_seqcnt > 65) mode0_seqcnt=0;
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
; 0000 04FB         if (mode0_seqcnt>=0 && mode0_seqcnt<=35)                //display date and time
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
; 0000 04FC                 {
; 0000 04FD                 lcd_gotoxy(0,0);
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
; 0000 04FE                 lcd_putsf("time: ");
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
; 0000 04FF                 display_time();
;PCODE: $000008C0 VOL: 0
; 0000 0500                 lcd_gotoxy(0,1);
;PCODE: $000008C1 VOL: 0
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
;PCODE: $000008C4 VOL: 0
; 0000 0501                     lcd_putsf("angle: ");
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
; 0000 0502                     display_angle(angle);
;PCODE: $000008C8 VOL: 0
;PCODE: $000008C9 VOL: 0
; 0000 0503 //                    lcd_putsf(" deg.");
; 0000 0504 
; 0000 0505                 }
; 0000 0506         if (mode0_seqcnt>=36 && mode0_seqcnt<=45)            //display sunrise and sunset time
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;PCODE: $000008D4 VOL: 0
; 0000 0507                 {
; 0000 0508                 lcd_gotoxy(0,0);
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
; 0000 0509                 lcd_putsf("sunrise: ");
;PCODE: $000008D9 VOL: 0
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
; 0000 050A                 display_day2(sunrise_min);
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
;PCODE: $000008DF VOL: 0
; 0000 050B                 lcd_gotoxy(0,1);
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
; 0000 050C                 lcd_putsf("sunset: ");
;PCODE: $000008E4 VOL: 0
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
; 0000 050D                 display_day2(sunset_min);
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
; 0000 050E                 }
; 0000 050F         if (mode0_seqcnt>=46 && mode0_seqcnt<=55)
;PCODE: $000008EB VOL: 0
;PCODE: $000008EC VOL: 0
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
;PCODE: $000008F3 VOL: 0
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
; 0000 0510                 {                                            //next target angle and time
; 0000 0511                 lcd_gotoxy(0,0);
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
; 0000 0512                 lcd_putsf("next time/angle:");
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
;PCODE: $000008FC VOL: 0
; 0000 0513                 lcd_gotoxy(0,1);
;PCODE: $000008FD VOL: 0
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
; 0000 0514                 display_day2(target_time);
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
; 0000 0515                 lcd_putchar('/');
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
; 0000 0516                 display_angle(target_angle);
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
; 0000 0517                 }
; 0000 0518         if (mode0_seqcnt>=56 && mode0_seqcnt<=65)             //pv volt and current
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
; 0000 0519                 {
; 0000 051A //                lcd_gotoxy(0,0);
; 0000 051B //                lcd_putsf("charge: ");
; 0000 051C //                if(boost_fl)
; 0000 051D //                lcd_putsf("boost    ");
; 0000 051E //                else if (float_fl)
; 0000 051F //                lcd_putsf("equal..  ");
; 0000 0520 //                else
; 0000 0521 //                lcd_putsf("trickle  ");
; 0000 0522  //               put_message(high_angle);
; 0000 0523 //               display_analog(adc_loadcurrent);
; 0000 0524  //               lcd_putsf(" Amp.");
; 0000 0525                 lcd_gotoxy(0,0);
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
; 0000 0526                  lcd_putsf("date: ");
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
; 0000 0527                 display_date();
;PCODE: $00000919 VOL: 0
; 0000 0528          //display_analog(current);
; 0000 0529                 lcd_gotoxy(0,1);
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
; 0000 052A                 display_angle1(low_angle);
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
; 0000 052B                 lcd_putsf(" / ");
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
; 0000 052C                 display_angle1(high_angle);
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
; 0000 052D //                lcd_putsf("Degs.");
; 0000 052E                 }
; 0000 052F          lcd_gotoxy(0,2);
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
; 0000 0530                 lcd_putsf("X axis: ");
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
; 0000 0531                 put_message(Acc_x/16.384);
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
; 0000 0532                 lcd_gotoxy(0,3);
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
;PCODE: $00000936 VOL: 0
; 0000 0533                 lcd_putsf("Y-axis: ");
;PCODE: $00000937 VOL: 0
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
; 0000 0534                 put_message(Acc_y/16.384);
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
; 0000 0535                 lcd_putsf("  T:");
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
; 0000 0536                 put_message((Temperature/340.00)+36.53);
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
; 0000 0537 
; 0000 0538 
; 0000 0539 
; 0000 053A 
; 0000 053B          display_analog(adc_pvolt);
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
; 0000 053C         }
; 0000 053D if (mode == 1 && !manual_fl)
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
;PCODE: $00000957 VOL: 0
; 0000 053E         {
; 0000 053F         lcd_gotoxy(0,1);
;PCODE: $00000958 VOL: 0
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
; 0000 0540         switch(set)
;PCODE: $0000095C VOL: 0
; 0000 0541         {
; 0000 0542         case 0: display_time();
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
; 0000 0543                 break;
;PCODE: $00000960 VOL: 0
; 0000 0544         case 1: display_date();
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
; 0000 0545                 break;
;PCODE: $00000965 VOL: 0
; 0000 0546         case 2: display_latlong(set_latit);
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
; 0000 0547                 lcd_putchar(0);
;PCODE: $0000096B VOL: 0
;PCODE: $0000096C VOL: 0
; 0000 0548                 break;
;PCODE: $0000096D VOL: 0
; 0000 0549         case 3: display_latlong(set_longitude);
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
; 0000 054A                 lcd_putchar(0);
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
; 0000 054B                 break;
;PCODE: $00000975 VOL: 0
; 0000 054C         case 4: put_message2(time_interval);
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
; 0000 054D                 lcd_putsf(" minutes  ");
;PCODE: $0000097B VOL: 0
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
; 0000 054E                 break;
;PCODE: $0000097E VOL: 0
; 0000 054F         case 5: lcd_putsf("GMT ");
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
; 0000 0550                 display_latlong(set_timezone);
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
; 0000 0551                 break;
;PCODE: $00000987 VOL: 0
; 0000 0552         }
;PCODE: $00000988 VOL: 0
; 0000 0553            switch (item1)
;PCODE: $00000989 VOL: 0
; 0000 0554                 {
; 0000 0555                 case 0: blink_data = hour;
;PCODE: $0000098A VOL: 0
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
;PCODE: $0000098D VOL: 0
; 0000 0556                         blink_locx =0;
;PCODE: $0000098E VOL: 0
; 0000 0557                         blink_locy =1;
;PCODE: $0000098F VOL: 0
;PCODE: $00000990 VOL: 0
; 0000 0558                         break;
;PCODE: $00000991 VOL: 0
; 0000 0559                 case 1: blink_data = minute;
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
; 0000 055A                         blink_locx =3;
;PCODE: $00000997 VOL: 0
;PCODE: $00000998 VOL: 0
; 0000 055B                         blink_locy =1;
;PCODE: $00000999 VOL: 0
;PCODE: $0000099A VOL: 0
; 0000 055C                         break;
;PCODE: $0000099B VOL: 0
; 0000 055D                 case 2: blink_data = second;
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
; 0000 055E                         blink_locx =6;
;PCODE: $000009A1 VOL: 0
;PCODE: $000009A2 VOL: 0
; 0000 055F                         blink_locy =1;
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
; 0000 0560                         break;
;PCODE: $000009A5 VOL: 0
; 0000 0561                 case 3: blink_data = day;
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
; 0000 0562                         blink_locx =0;
;PCODE: $000009AB VOL: 0
; 0000 0563                         blink_locy =1;
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
; 0000 0564                         break;
;PCODE: $000009AE VOL: 0
; 0000 0565                 case 4: blink_data = month;
;PCODE: $000009AF VOL: 0
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
; 0000 0566                         blink_locx =3;
;PCODE: $000009B4 VOL: 0
;PCODE: $000009B5 VOL: 0
; 0000 0567                         blink_locy =1;
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
; 0000 0568                         break;
;PCODE: $000009B8 VOL: 0
; 0000 0569                 case 5: blink_data = year;
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
; 0000 056A                         blink_locx =8;
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
; 0000 056B                         blink_locy =1;
;PCODE: $000009C0 VOL: 0
;PCODE: $000009C1 VOL: 0
; 0000 056C                         break;
;PCODE: $000009C2 VOL: 0
; 0000 056D                 case 6: char_latitude = blink_data = (abs(set_latit)/100)%100 ;
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
;PCODE: $000009CC VOL: 0
;PCODE: $000009CD VOL: 0
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
; 0000 056E                         blink_locx =2;
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
; 0000 056F                         blink_locy =1;
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
; 0000 0570                         break;
;PCODE: $000009D4 VOL: 0
; 0000 0571                 case 7: char_latitude = blink_data = abs(set_latit)%100 ;
;PCODE: $000009D5 VOL: 0
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
; 0000 0572                         blink_locx =5;
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
; 0000 0573                         blink_locy =1;
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
; 0000 0574                         break;
;PCODE: $000009E3 VOL: 0
; 0000 0575                 case 8: char_longitude = blink_data = (abs(set_longitude)/100)%100 ;
;PCODE: $000009E4 VOL: 0
;PCODE: $000009E5 VOL: 0
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
; 0000 0576                         blink_locx =2;
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
; 0000 0577                         blink_locy =1;
;PCODE: $000009F3 VOL: 0
;PCODE: $000009F4 VOL: 0
; 0000 0578                         break;
;PCODE: $000009F5 VOL: 0
; 0000 0579                 case 9: char_longitude = blink_data = abs(set_longitude)%100 ;
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
;PCODE: $000009FD VOL: 0
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
; 0000 057A                         blink_locx =5;
;PCODE: $00000A00 VOL: 0
;PCODE: $00000A01 VOL: 0
; 0000 057B                         blink_locy =1;
;PCODE: $00000A02 VOL: 0
;PCODE: $00000A03 VOL: 0
; 0000 057C                         break;
;PCODE: $00000A04 VOL: 0
; 0000 057D                 case 10:blink_data = time_interval;
;PCODE: $00000A05 VOL: 0
;PCODE: $00000A06 VOL: 0
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
; 0000 057E                         blink_locx =0;
;PCODE: $00000A0A VOL: 0
; 0000 057F                         blink_locy =1;
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
; 0000 0580                         break;
;PCODE: $00000A0D VOL: 0
; 0000 0581                 case 11:char_timezone = blink_data = (abs(set_timezone)/100)%100 ;
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
;PCODE: $00000A15 VOL: 0
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
;PCODE: $00000A18 VOL: 0
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
; 0000 0582                         blink_locx =6;
;PCODE: $00000A1B VOL: 0
;PCODE: $00000A1C VOL: 0
; 0000 0583                         blink_locy =1;
;PCODE: $00000A1D VOL: 0
;PCODE: $00000A1E VOL: 0
; 0000 0584                         break;
;PCODE: $00000A1F VOL: 0
; 0000 0585                 case 12:char_timezone =  blink_data = abs(set_timezone)%100;
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
;PCODE: $00000A23 VOL: 0
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
; 0000 0586                         blink_locx = 9;
;PCODE: $00000A2A VOL: 0
;PCODE: $00000A2B VOL: 0
; 0000 0587                         blink_locy =1;
;PCODE: $00000A2C VOL: 0
;PCODE: $00000A2D VOL: 0
; 0000 0588                         break;
;PCODE: $00000A2E VOL: 0
; 0000 0589 
; 0000 058A                 }
;PCODE: $00000A2F VOL: 0
; 0000 058B         }
; 0000 058C if (manual_fl)
;PCODE: $00000A30 VOL: 0
;PCODE: $00000A31 VOL: 0
;PCODE: $00000A32 VOL: 0
;PCODE: $00000A33 VOL: 0
; 0000 058D     {
; 0000 058E     lcd_gotoxy(0,0);
;PCODE: $00000A34 VOL: 0
;PCODE: $00000A35 VOL: 0
;PCODE: $00000A36 VOL: 0
;PCODE: $00000A37 VOL: 0
; 0000 058F                 lcd_putsf("* Manual Mode * ");
;PCODE: $00000A38 VOL: 0
;PCODE: $00000A39 VOL: 0
;PCODE: $00000A3A VOL: 0
; 0000 0590 
; 0000 0591 //    lcd_putsf("manual mode");
; 0000 0592     lcd_gotoxy(0,1);
;PCODE: $00000A3B VOL: 0
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
;PCODE: $00000A3E VOL: 0
; 0000 0593     lcd_putsf("angle: ");
;PCODE: $00000A3F VOL: 0
;PCODE: $00000A40 VOL: 0
;PCODE: $00000A41 VOL: 0
; 0000 0594     display_angle(angle);
;PCODE: $00000A42 VOL: 0
;PCODE: $00000A43 VOL: 0
; 0000 0595     lcd_putchar(0);
;PCODE: $00000A44 VOL: 0
;PCODE: $00000A45 VOL: 0
; 0000 0596     }
; 0000 0597 
; 0000 0598 
; 0000 0599 }
;PCODE: $00000A46 VOL: 0
;PCODE: $00000A47 VOL: 0
;PCODE: $00000A48 VOL: 0
;
;
;
;
;
;
;void cal_angle(void)
; 0000 05A1 {
;PCODE: $00000A49 VOL: 0
;PCODE: $00000A4A VOL: 0
; 0000 05A2 float sensitivity,angle_rad;
; 0000 05A3 
; 0000 05A4 sensitivity = span_adc - zero_adc;
;PCODE: $00000A4B VOL: 0
;	sensitivity -> Y+4
;	angle_rad -> Y+0
;PCODE: $00000A4C VOL: 0
;PCODE: $00000A4D VOL: 0
;PCODE: $00000A4E VOL: 0
;PCODE: $00000A4F VOL: 0
;PCODE: $00000A50 VOL: 0
; 0000 05A5 angle_rad = asin(((float)adc_angle - (float)zero_adc) /sensitivity);
;PCODE: $00000A51 VOL: 0
;PCODE: $00000A52 VOL: 0
;PCODE: $00000A53 VOL: 0
;PCODE: $00000A54 VOL: 0
;PCODE: $00000A55 VOL: 0
;PCODE: $00000A56 VOL: 0
;PCODE: $00000A57 VOL: 0
;PCODE: $00000A58 VOL: 0
;PCODE: $00000A59 VOL: 0
;PCODE: $00000A5A VOL: 0
;PCODE: $00000A5B VOL: 0
;PCODE: $00000A5C VOL: 0
;PCODE: $00000A5D VOL: 0
; 0000 05A6 //angle_sum = angle_sum + ((angle_rad * 572.957795) + 900) ;
; 0000 05A7 angle=((angle_rad * 572.957795) + 900) ;
;PCODE: $00000A5E VOL: 0
;PCODE: $00000A5F VOL: 0
;PCODE: $00000A60 VOL: 0
;PCODE: $00000A61 VOL: 0
;PCODE: $00000A62 VOL: 0
;PCODE: $00000A63 VOL: 0
;PCODE: $00000A64 VOL: 0
;PCODE: $00000A65 VOL: 0
; 0000 05A8 
; 0000 05A9 angle_cnt++;
;PCODE: $00000A66 VOL: 0
;PCODE: $00000A67 VOL: 0
;PCODE: $00000A68 VOL: 0
;PCODE: $00000A69 VOL: 0
; 0000 05AA /*
; 0000 05AB if (angle_cnt >=4)
; 0000 05AC {
; 0000 05AD angle_cnt =0;
; 0000 05AE angle = angle_sum/4;
; 0000 05AF angle_sum =0;
; 0000 05B0 }
; 0000 05B1 *///angle = (float)adc_buffer - (float)zero_adc /sensitivity ;
; 0000 05B2 }
;PCODE: $00000A6A VOL: 0
;PCODE: $00000A6B VOL: 0
;PCODE: $00000A6C VOL: 0
;
;void target_cal(void)
; 0000 05B5 {
;PCODE: $00000A6D VOL: 0
;PCODE: $00000A6E VOL: 0
; 0000 05B6 long  a;
; 0000 05B7 int y=1;
; 0000 05B8 time_elap = to_minute(hour,minute);      // convert real time to minutes
;PCODE: $00000A6F VOL: 0
;PCODE: $00000A70 VOL: 0
;PCODE: $00000A71 VOL: 0
;	a -> Y+2
;	y -> R16,R17
;PCODE: $00000A72 VOL: 0
;PCODE: $00000A73 VOL: 0
;PCODE: $00000A74 VOL: 0
;PCODE: $00000A75 VOL: 0
;PCODE: $00000A76 VOL: 0
;PCODE: $00000A77 VOL: 0
; 0000 05B9 if (time_elap > sunrise_min)
;PCODE: $00000A78 VOL: 0
;PCODE: $00000A79 VOL: 0
;PCODE: $00000A7A VOL: 0
;PCODE: $00000A7B VOL: 0
;PCODE: $00000A7C VOL: 0
; 0000 05BA         {
; 0000 05BB         for (y=1;y<=150;y++)
;PCODE: $00000A7D VOL: 0
;PCODE: $00000A7E VOL: 0
;PCODE: $00000A7F VOL: 0
;PCODE: $00000A80 VOL: 0
;PCODE: $00000A81 VOL: 0
;PCODE: $00000A82 VOL: 0
;PCODE: $00000A83 VOL: 0
;PCODE: $00000A84 VOL: 0
;PCODE: $00000A85 VOL: 0
; 0000 05BC         {
; 0000 05BD         if (time_elap <= (sunrise_min +(time_interval*y)))
;PCODE: $00000A86 VOL: 0
;PCODE: $00000A87 VOL: 0
;PCODE: $00000A88 VOL: 0
;PCODE: $00000A89 VOL: 0
;PCODE: $00000A8A VOL: 0
;PCODE: $00000A8B VOL: 0
;PCODE: $00000A8C VOL: 0
;PCODE: $00000A8D VOL: 0
;PCODE: $00000A8E VOL: 0
;PCODE: $00000A8F VOL: 0
; 0000 05BE                 {
; 0000 05BF                 target_time = sunrise_min +((long)(time_interval)*y);
;PCODE: $00000A90 VOL: 0
;PCODE: $00000A91 VOL: 0
;PCODE: $00000A92 VOL: 0
;PCODE: $00000A93 VOL: 0
;PCODE: $00000A94 VOL: 0
;PCODE: $00000A95 VOL: 0
;PCODE: $00000A96 VOL: 0
;PCODE: $00000A97 VOL: 0
;PCODE: $00000A98 VOL: 0
;PCODE: $00000A99 VOL: 0
;PCODE: $00000A9A VOL: 0
; 0000 05C0                 break;
;PCODE: $00000A9B VOL: 0
; 0000 05C1                 }
; 0000 05C2         }
;PCODE: $00000A9C VOL: 0
;PCODE: $00000A9D VOL: 0
;PCODE: $00000A9E VOL: 0
;PCODE: $00000A9F VOL: 0
;PCODE: $00000AA0 VOL: 0
;PCODE: $00000AA1 VOL: 0
; 0000 05C3 
; 0000 05C4         if (target_time > sunset_min) target_time = sunset_min;
;PCODE: $00000AA2 VOL: 0
;PCODE: $00000AA3 VOL: 0
;PCODE: $00000AA4 VOL: 0
;PCODE: $00000AA5 VOL: 0
;PCODE: $00000AA6 VOL: 0
;PCODE: $00000AA7 VOL: 0
;PCODE: $00000AA8 VOL: 0
;PCODE: $00000AA9 VOL: 0
;PCODE: $00000AAA VOL: 0
; 0000 05C5         if (target_time < sunrise_min) target_time = sunrise_min;
;PCODE: $00000AAB VOL: 0
;PCODE: $00000AAC VOL: 0
;PCODE: $00000AAD VOL: 0
;PCODE: $00000AAE VOL: 0
;PCODE: $00000AAF VOL: 0
;PCODE: $00000AB0 VOL: 0
;PCODE: $00000AB1 VOL: 0
;PCODE: $00000AB2 VOL: 0
;PCODE: $00000AB3 VOL: 0
;PCODE: $00000AB4 VOL: 0
; 0000 05C6 
; 0000 05C7         a = target_time - sunrise_min;
;PCODE: $00000AB5 VOL: 0
;PCODE: $00000AB6 VOL: 0
;PCODE: $00000AB7 VOL: 0
;PCODE: $00000AB8 VOL: 0
;PCODE: $00000AB9 VOL: 0
;PCODE: $00000ABA VOL: 0
;PCODE: $00000ABB VOL: 0
;PCODE: $00000ABC VOL: 0
;PCODE: $00000ABD VOL: 0
; 0000 05C8         target_angle = (1800 * a)/ (long)daytime;
;PCODE: $00000ABE VOL: 0
;PCODE: $00000ABF VOL: 0
;PCODE: $00000AC0 VOL: 0
;PCODE: $00000AC1 VOL: 0
;PCODE: $00000AC2 VOL: 0
;PCODE: $00000AC3 VOL: 0
;PCODE: $00000AC4 VOL: 0
;PCODE: $00000AC5 VOL: 0
; 0000 05C9         if (target_angle > high_angle) target_angle = high_angle;
;PCODE: $00000AC6 VOL: 0
;PCODE: $00000AC7 VOL: 0
;PCODE: $00000AC8 VOL: 0
;PCODE: $00000AC9 VOL: 0
;PCODE: $00000ACA VOL: 0
;PCODE: $00000ACB VOL: 0
;PCODE: $00000ACC VOL: 0
;PCODE: $00000ACD VOL: 0
; 0000 05CA         if (target_angle < low_angle) target_angle = low_angle;
;PCODE: $00000ACE VOL: 0
;PCODE: $00000ACF VOL: 0
;PCODE: $00000AD0 VOL: 0
;PCODE: $00000AD1 VOL: 0
;PCODE: $00000AD2 VOL: 0
;PCODE: $00000AD3 VOL: 0
;PCODE: $00000AD4 VOL: 0
;PCODE: $00000AD5 VOL: 0
;PCODE: $00000AD6 VOL: 0
; 0000 05CB // bring the panel to 90 degrees (horizontal position ) 10 minutes after sunset.
; 0000 05CC // added to hardcode limit from 50 to 125 degrees for ravindra energy
; 0000 05CD         if (target_angle > 1250) target_angle = 1250;
;PCODE: $00000AD7 VOL: 0
;PCODE: $00000AD8 VOL: 0
;PCODE: $00000AD9 VOL: 0
;PCODE: $00000ADA VOL: 0
;PCODE: $00000ADB VOL: 0
;PCODE: $00000ADC VOL: 0
; 0000 05CE         if (target_angle < 500) target_angle = 500;
;PCODE: $00000ADD VOL: 0
;PCODE: $00000ADE VOL: 0
;PCODE: $00000ADF VOL: 0
;PCODE: $00000AE0 VOL: 0
;PCODE: $00000AE1 VOL: 0
;PCODE: $00000AE2 VOL: 0
; 0000 05CF /////////////////////remove this for other limits
; 0000 05D0 
; 0000 05D1         if ((time_elap < sunrise_min) || (time_elap>sunset_min))
;PCODE: $00000AE3 VOL: 0
;PCODE: $00000AE4 VOL: 0
;PCODE: $00000AE5 VOL: 0
;PCODE: $00000AE6 VOL: 0
;PCODE: $00000AE7 VOL: 0
;PCODE: $00000AE8 VOL: 0
;PCODE: $00000AE9 VOL: 0
;PCODE: $00000AEA VOL: 0
;PCODE: $00000AEB VOL: 0
;PCODE: $00000AEC VOL: 0
;PCODE: $00000AED VOL: 0
;PCODE: $00000AEE VOL: 0
;PCODE: $00000AEF VOL: 0
; 0000 05D2             {
; 0000 05D3             target_time = sunset_min+10;
;PCODE: $00000AF0 VOL: 0
;PCODE: $00000AF1 VOL: 0
;PCODE: $00000AF2 VOL: 0
;PCODE: $00000AF3 VOL: 0
;PCODE: $00000AF4 VOL: 0
;PCODE: $00000AF5 VOL: 0
; 0000 05D4             target_angle = 900;     // target angle is 90.0 degrees
;PCODE: $00000AF6 VOL: 0
;PCODE: $00000AF7 VOL: 0
; 0000 05D5             }
; 0000 05D6 
; 0000 05D7         if ((time_elap == target_time) && !start_fl && !end_fl)
;PCODE: $00000AF8 VOL: 0
;PCODE: $00000AF9 VOL: 0
;PCODE: $00000AFA VOL: 0
;PCODE: $00000AFB VOL: 0
;PCODE: $00000AFC VOL: 0
;PCODE: $00000AFD VOL: 0
;PCODE: $00000AFE VOL: 0
;PCODE: $00000AFF VOL: 0
;PCODE: $00000B00 VOL: 0
;PCODE: $00000B01 VOL: 0
;PCODE: $00000B02 VOL: 0
;PCODE: $00000B03 VOL: 0
;PCODE: $00000B04 VOL: 0
;PCODE: $00000B05 VOL: 0
;PCODE: $00000B06 VOL: 0
; 0000 05D8         {
; 0000 05D9         start_fl =1;
;PCODE: $00000B07 VOL: 0
;PCODE: $00000B08 VOL: 0
;PCODE: $00000B09 VOL: 0
; 0000 05DA         }
; 0000 05DB 
; 0000 05DC         }
;PCODE: $00000B0A VOL: 0
; 0000 05DD }
;PCODE: $00000B0B VOL: 0
;PCODE: $00000B0C VOL: 0
;PCODE: $00000B0D VOL: 0
;PCODE: $00000B0E VOL: 0
;PCODE: $00000B0F VOL: 0
;PCODE: $00000B10 VOL: 0
;PCODE: $00000B11 VOL: 0
;PCODE: $00000B12 VOL: 0
;
;
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 05E4 {
;PCODE: $00000B13 VOL: 0
;PCODE: $00000B14 VOL: 0
; 0000 05E5 rtc_int_fn();
;PCODE: $00000B15 VOL: 0
; 0000 05E6 
; 0000 05E7 }
;PCODE: $00000B16 VOL: 0
;PCODE: $00000B17 VOL: 0
;PCODE: $00000B18 VOL: 0
;
;void rtc_int_fn(void)
; 0000 05EA {
;PCODE: $00000B19 VOL: 0
;PCODE: $00000B1A VOL: 0
; 0000 05EB int night_time;
; 0000 05EC //#asm("wdr")
; 0000 05ED time_cnt++;
;PCODE: $00000B1B VOL: 0
;PCODE: $00000B1C VOL: 0
;	night_time -> R16,R17
;PCODE: $00000B1D VOL: 0
;PCODE: $00000B1E VOL: 0
;PCODE: $00000B1F VOL: 0
;PCODE: $00000B20 VOL: 0
; 0000 05EE if (time_cnt>=1800)     //execute every 30minutes to save rtc value for backup
;PCODE: $00000B21 VOL: 0
;PCODE: $00000B22 VOL: 0
;PCODE: $00000B23 VOL: 0
; 0000 05EF {
; 0000 05F0 time_cnt =0;
;PCODE: $00000B24 VOL: 0
;PCODE: $00000B25 VOL: 0
; 0000 05F1 e_day = day;
;PCODE: $00000B26 VOL: 0
;PCODE: $00000B27 VOL: 0
;PCODE: $00000B28 VOL: 0
; 0000 05F2 e_week =week;
;PCODE: $00000B29 VOL: 0
;PCODE: $00000B2A VOL: 0
;PCODE: $00000B2B VOL: 0
; 0000 05F3 e_year = year;
;PCODE: $00000B2C VOL: 0
;PCODE: $00000B2D VOL: 0
;PCODE: $00000B2E VOL: 0
; 0000 05F4 e_month =month;
;PCODE: $00000B2F VOL: 0
;PCODE: $00000B30 VOL: 0
;PCODE: $00000B31 VOL: 0
; 0000 05F5 e_hour = hour;
;PCODE: $00000B32 VOL: 0
;PCODE: $00000B33 VOL: 0
;PCODE: $00000B34 VOL: 0
; 0000 05F6 e_minute = minute;
;PCODE: $00000B35 VOL: 0
;PCODE: $00000B36 VOL: 0
;PCODE: $00000B37 VOL: 0
; 0000 05F7 e_second = second;
;PCODE: $00000B38 VOL: 0
;PCODE: $00000B39 VOL: 0
;PCODE: $00000B3A VOL: 0
; 0000 05F8 }
; 0000 05F9 // Place your code here
; 0000 05FA rise_set((long)(day),(long)(month),(long)year+2000,12,(float)(set_latit)/100,(float)(set_longitude)/100,(float)(set_time ...
;PCODE: $00000B3B VOL: 0
;PCODE: $00000B3C VOL: 0
;PCODE: $00000B3D VOL: 0
;PCODE: $00000B3E VOL: 0
;PCODE: $00000B3F VOL: 0
;PCODE: $00000B40 VOL: 0
;PCODE: $00000B41 VOL: 0
;PCODE: $00000B42 VOL: 0
;PCODE: $00000B43 VOL: 0
;PCODE: $00000B44 VOL: 0
;PCODE: $00000B45 VOL: 0
;PCODE: $00000B46 VOL: 0
;PCODE: $00000B47 VOL: 0
;PCODE: $00000B48 VOL: 0
;PCODE: $00000B49 VOL: 0
;PCODE: $00000B4A VOL: 0
;PCODE: $00000B4B VOL: 0
;PCODE: $00000B4C VOL: 0
;PCODE: $00000B4D VOL: 0
;PCODE: $00000B4E VOL: 0
;PCODE: $00000B4F VOL: 0
;PCODE: $00000B50 VOL: 0
;PCODE: $00000B51 VOL: 0
;PCODE: $00000B52 VOL: 0
;PCODE: $00000B53 VOL: 0
;PCODE: $00000B54 VOL: 0
;PCODE: $00000B55 VOL: 0
;PCODE: $00000B56 VOL: 0
;PCODE: $00000B57 VOL: 0
;PCODE: $00000B58 VOL: 0
;PCODE: $00000B59 VOL: 0
;PCODE: $00000B5A VOL: 0
;PCODE: $00000B5B VOL: 0
;PCODE: $00000B5C VOL: 0
;PCODE: $00000B5D VOL: 0
; 0000 05FB // Place your code here
; 0000 05FC if (mode ==0)
;PCODE: $00000B5E VOL: 0
;PCODE: $00000B5F VOL: 0
;PCODE: $00000B60 VOL: 0
; 0000 05FD {
; 0000 05FE /*log_cnt++;
; 0000 05FF if(log_cnt >= log_interval)
; 0000 0600 {
; 0000 0601 log_cnt =0;
; 0000 0602 if(log_fl) print_realtime();
; 0000 0603 }
; 0000 0604 */
; 0000 0605 rtc_get_time(&hour,&minute,&second);
;PCODE: $00000B61 VOL: 0
;PCODE: $00000B62 VOL: 0
;PCODE: $00000B63 VOL: 0
;PCODE: $00000B64 VOL: 0
;PCODE: $00000B65 VOL: 0
;PCODE: $00000B66 VOL: 0
; 0000 0606  //               if (hour <0 || hour >24) rtc_err=1;         //added for rtc error
; 0000 0607 
; 0000 0608 rtc_get_date(&week,&day,&month,&year);   //pdi is weekday not used only for cvavr2.05
;PCODE: $00000B67 VOL: 0
;PCODE: $00000B68 VOL: 0
;PCODE: $00000B69 VOL: 0
;PCODE: $00000B6A VOL: 0
;PCODE: $00000B6B VOL: 0
;PCODE: $00000B6C VOL: 0
;PCODE: $00000B6D VOL: 0
;PCODE: $00000B6E VOL: 0
; 0000 0609 }
; 0000 060A //if (boost_fl) boost_time++;
; 0000 060B //if (float_fl) float_time++;
; 0000 060C adc_fl =1;
;PCODE: $00000B6F VOL: 0
;PCODE: $00000B70 VOL: 0
;PCODE: $00000B71 VOL: 0
;PCODE: $00000B72 VOL: 0
; 0000 060D led2=~relay1;
;PCODE: $00000B73 VOL: 0
;PCODE: $00000B74 VOL: 0
;PCODE: $00000B75 VOL: 0
;PCODE: $00000B76 VOL: 0
;PCODE: $00000B77 VOL: 0
;PCODE: $00000B78 VOL: 0
;PCODE: $00000B79 VOL: 0
;PCODE: $00000B7A VOL: 0
;PCODE: $00000B7B VOL: 0
;PCODE: $00000B7C VOL: 0
; 0000 060E led1=~relay2;
;PCODE: $00000B7D VOL: 0
;PCODE: $00000B7E VOL: 0
;PCODE: $00000B7F VOL: 0
;PCODE: $00000B80 VOL: 0
;PCODE: $00000B81 VOL: 0
;PCODE: $00000B82 VOL: 0
;PCODE: $00000B83 VOL: 0
;PCODE: $00000B84 VOL: 0
;PCODE: $00000B85 VOL: 0
;PCODE: $00000B86 VOL: 0
; 0000 060F //led3=~err_fl;
; 0000 0610 //led4= ~(boost_fl | float_fl) ;
; 0000 0611 //led5= ~trickle_fl;
; 0000 0612 //if (adc_battery < cutoff_voltage) led6 =0;
; 0000 0613 //else led6 =1;
; 0000 0614 led_blinkfl = ~ led_blinkfl;
;PCODE: $00000B87 VOL: 0
;PCODE: $00000B88 VOL: 0
;PCODE: $00000B89 VOL: 0
; 0000 0615 
; 0000 0616 //display_update();
; 0000 0617 bright_cnt++;
;PCODE: $00000B8A VOL: 0
;PCODE: $00000B8B VOL: 0
;PCODE: $00000B8C VOL: 0
;PCODE: $00000B8D VOL: 0
; 0000 0618 if (bright_cnt > 20) bright_cnt =20;
;PCODE: $00000B8E VOL: 0
;PCODE: $00000B8F VOL: 0
;PCODE: $00000B90 VOL: 0
;PCODE: $00000B91 VOL: 0
;PCODE: $00000B92 VOL: 0
; 0000 0619 if (bright_cnt<20 ) backlight =0;         // not valid for low battery
;PCODE: $00000B93 VOL: 0
;PCODE: $00000B94 VOL: 0
;PCODE: $00000B95 VOL: 0
;PCODE: $00000B96 VOL: 0
;PCODE: $00000B97 VOL: 0
;PCODE: $00000B98 VOL: 0
; 0000 061A else backlight =0;
;PCODE: $00000B99 VOL: 0
;PCODE: $00000B9A VOL: 0
;PCODE: $00000B9B VOL: 0
;PCODE: $00000B9C VOL: 0
; 0000 061B program_timeout++;
;PCODE: $00000B9D VOL: 0
;PCODE: $00000B9E VOL: 0
;PCODE: $00000B9F VOL: 0
;PCODE: $00000BA0 VOL: 0
;PCODE: $00000BA1 VOL: 0
; 0000 061C if (program_timeout >=30) program_timeout =30;
;PCODE: $00000BA2 VOL: 0
;PCODE: $00000BA3 VOL: 0
;PCODE: $00000BA4 VOL: 0
;PCODE: $00000BA5 VOL: 0
;PCODE: $00000BA6 VOL: 0
; 0000 061D if (program_timeout ==29)
;PCODE: $00000BA7 VOL: 0
;PCODE: $00000BA8 VOL: 0
;PCODE: $00000BA9 VOL: 0
;PCODE: $00000BAA VOL: 0
; 0000 061E clear_to_default();     //reset to normal mode if no key is pressed for more than 29 seconds.
;PCODE: $00000BAB VOL: 0
; 0000 061F 
; 0000 0620 if (end_fl)
;PCODE: $00000BAC VOL: 0
;PCODE: $00000BAD VOL: 0
;PCODE: $00000BAE VOL: 0
;PCODE: $00000BAF VOL: 0
; 0000 0621 {
; 0000 0622 end_cnt++;
;PCODE: $00000BB0 VOL: 0
;PCODE: $00000BB1 VOL: 0
;PCODE: $00000BB2 VOL: 0
;PCODE: $00000BB3 VOL: 0
; 0000 0623 if (end_cnt >=61)
;PCODE: $00000BB4 VOL: 0
;PCODE: $00000BB5 VOL: 0
;PCODE: $00000BB6 VOL: 0
; 0000 0624 {
; 0000 0625 end_fl =0;
;PCODE: $00000BB7 VOL: 0
;PCODE: $00000BB8 VOL: 0
;PCODE: $00000BB9 VOL: 0
; 0000 0626 end_cnt =0;
;PCODE: $00000BBA VOL: 0
;PCODE: $00000BBB VOL: 0
; 0000 0627 }
; 0000 0628 }
;PCODE: $00000BBC VOL: 0
; 0000 0629 // added code to check if time is between sunset and sunrise. if yes, invoke sleep
; 0000 062A // sleep/standby mode.
; 0000 062B night_time = to_minute(hour,minute);      // convert real time to minutes
;PCODE: $00000BBD VOL: 0
;PCODE: $00000BBE VOL: 0
;PCODE: $00000BBF VOL: 0
;PCODE: $00000BC0 VOL: 0
;PCODE: $00000BC1 VOL: 0
; 0000 062C if (((night_time > sunset_min +30)|| (night_time < sunrise_min - 30))&& key1 && key2 && key3 && key4)
;PCODE: $00000BC2 VOL: 0
;PCODE: $00000BC3 VOL: 0
;PCODE: $00000BC4 VOL: 0
;PCODE: $00000BC5 VOL: 0
;PCODE: $00000BC6 VOL: 0
;PCODE: $00000BC7 VOL: 0
;PCODE: $00000BC8 VOL: 0
;PCODE: $00000BC9 VOL: 0
;PCODE: $00000BCA VOL: 0
;PCODE: $00000BCB VOL: 0
;PCODE: $00000BCC VOL: 0
;PCODE: $00000BCD VOL: 0
;PCODE: $00000BCE VOL: 0
;PCODE: $00000BCF VOL: 0
;PCODE: $00000BD0 VOL: 0
;PCODE: $00000BD1 VOL: 0
;PCODE: $00000BD2 VOL: 0
;PCODE: $00000BD3 VOL: 0
;PCODE: $00000BD4 VOL: 0
;PCODE: $00000BD5 VOL: 0
;PCODE: $00000BD6 VOL: 0
;PCODE: $00000BD7 VOL: 0
;PCODE: $00000BD8 VOL: 0
;PCODE: $00000BD9 VOL: 0
;PCODE: $00000BDA VOL: 0
;PCODE: $00000BDB VOL: 0
;PCODE: $00000BDC VOL: 0
;PCODE: $00000BDD VOL: 0
;PCODE: $00000BDE VOL: 0
;PCODE: $00000BDF VOL: 0
;PCODE: $00000BE0 VOL: 0
;PCODE: $00000BE1 VOL: 0
; 0000 062D         {
; 0000 062E         sleep_counter++;
;PCODE: $00000BE2 VOL: 0
;PCODE: $00000BE3 VOL: 0
;PCODE: $00000BE4 VOL: 0
;PCODE: $00000BE5 VOL: 0
; 0000 062F         if (sleep_counter >=30)
;PCODE: $00000BE6 VOL: 0
;PCODE: $00000BE7 VOL: 0
;PCODE: $00000BE8 VOL: 0
; 0000 0630         {
; 0000 0631         sleep_counter =30;
;PCODE: $00000BE9 VOL: 0
;PCODE: $00000BEA VOL: 0
; 0000 0632         relay1=relay2=0;        //turn off relay
;PCODE: $00000BEB VOL: 0
;PCODE: $00000BEC VOL: 0
;PCODE: $00000BED VOL: 0
;PCODE: $00000BEE VOL: 0
; 0000 0633         backlight =1;                    //turn backlight off
;PCODE: $00000BEF VOL: 0
;PCODE: $00000BF0 VOL: 0
; 0000 0634         led1=led2=led3=led4=led5=led6 =1; //turn led off
;PCODE: $00000BF1 VOL: 0
;PCODE: $00000BF2 VOL: 0
;PCODE: $00000BF3 VOL: 0
;PCODE: $00000BF4 VOL: 0
;PCODE: $00000BF5 VOL: 0
;PCODE: $00000BF6 VOL: 0
;PCODE: $00000BF7 VOL: 0
;PCODE: $00000BF8 VOL: 0
;PCODE: $00000BF9 VOL: 0
;PCODE: $00000BFA VOL: 0
;PCODE: $00000BFB VOL: 0
;PCODE: $00000BFC VOL: 0
; 0000 0635 //        control_buck_off() ;
; 0000 0636         lcd_gotoxy(0,0);
;PCODE: $00000BFD VOL: 0
;PCODE: $00000BFE VOL: 0
;PCODE: $00000BFF VOL: 0
;PCODE: $00000C00 VOL: 0
; 0000 0637         lcd_putsf("  NIGHT MODE  ");
;PCODE: $00000C01 VOL: 0
;PCODE: $00000C02 VOL: 0
;PCODE: $00000C03 VOL: 0
; 0000 0638         lcd_gotoxy(0,1);
;PCODE: $00000C04 VOL: 0
;PCODE: $00000C05 VOL: 0
;PCODE: $00000C06 VOL: 0
;PCODE: $00000C07 VOL: 0
; 0000 0639         display_time();
;PCODE: $00000C08 VOL: 0
; 0000 063A         sleep_fl =1;
;PCODE: $00000C09 VOL: 0
;PCODE: $00000C0A VOL: 0
;PCODE: $00000C0B VOL: 0
; 0000 063B //        sleep_enable();
; 0000 063C //        idle();
; 0000 063D         }
; 0000 063E         }
;PCODE: $00000C0C VOL: 0
; 0000 063F else
;PCODE: $00000C0D VOL: 0
;PCODE: $00000C0E VOL: 0
; 0000 0640 {
; 0000 0641 sleep_counter =0;
;PCODE: $00000C0F VOL: 0
;PCODE: $00000C10 VOL: 0
; 0000 0642 sleep_fl=0;
;PCODE: $00000C11 VOL: 0
;PCODE: $00000C12 VOL: 0
;PCODE: $00000C13 VOL: 0
; 0000 0643 }
;PCODE: $00000C14 VOL: 0
; 0000 0644 
; 0000 0645 }
;PCODE: $00000C15 VOL: 0
;PCODE: $00000C16 VOL: 0
;PCODE: $00000C17 VOL: 0
;
;/*
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
;{
;char status,data;
;status=UCSRA;
;data=UDR;
;if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;   {
;   rx_buffer[rx_wr_index]=data;
;   if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;   if (++rx_counter == RX_BUFFER_SIZE)
;      {
;      rx_counter=0;
;      rx_buffer_overflow=1;
;      };
;   };
;}
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
;{
;char data;
;while (rx_counter==0);
;data=rx_buffer[rx_rd_index];
;if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;#asm("cli")
;--rx_counter;
;#asm("sei")
;return data;
;}
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE<256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
;{
;if (tx_counter)
;   {
;   --tx_counter;
;   UDR=tx_buffer[tx_rd_index];
;   if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;   };
;}
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
;{
;while (tx_counter == TX_BUFFER_SIZE);
;#asm("cli")
;if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;   {
;   tx_buffer[tx_wr_index]=c;
;   if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;   ++tx_counter;
;   }
;else
;   UDR=c;
;#asm("sei")
;}
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;*/
;
;void eeprom_transfer(void)
; 0000 06CD {
;PCODE: $00000C18 VOL: 0
;PCODE: $00000C19 VOL: 0
; 0000 06CE span_adc = e_span_adc;
;PCODE: $00000C1A VOL: 0
;PCODE: $00000C1B VOL: 0
;PCODE: $00000C1C VOL: 0
; 0000 06CF zero_adc = e_zero_adc;
;PCODE: $00000C1D VOL: 0
;PCODE: $00000C1E VOL: 0
;PCODE: $00000C1F VOL: 0
; 0000 06D0 time_interval = e_time_interval;
;PCODE: $00000C20 VOL: 0
;PCODE: $00000C21 VOL: 0
;PCODE: $00000C22 VOL: 0
; 0000 06D1 low_angle = e_low_angle;
;PCODE: $00000C23 VOL: 0
;PCODE: $00000C24 VOL: 0
;PCODE: $00000C25 VOL: 0
; 0000 06D2 high_angle = e_high_angle;
;PCODE: $00000C26 VOL: 0
;PCODE: $00000C27 VOL: 0
;PCODE: $00000C28 VOL: 0
; 0000 06D3 set_latit = e_set_latit;
;PCODE: $00000C29 VOL: 0
;PCODE: $00000C2A VOL: 0
;PCODE: $00000C2B VOL: 0
; 0000 06D4 set_longitude = e_set_longitude;
;PCODE: $00000C2C VOL: 0
;PCODE: $00000C2D VOL: 0
;PCODE: $00000C2E VOL: 0
; 0000 06D5 set_timezone = e_set_timezone;
;PCODE: $00000C2F VOL: 0
;PCODE: $00000C30 VOL: 0
;PCODE: $00000C31 VOL: 0
; 0000 06D6 }
;PCODE: $00000C32 VOL: 0
;PCODE: $00000C33 VOL: 0
;
;
;void init(void)
; 0000 06DA {// Declare your local variables here
;PCODE: $00000C34 VOL: 0
;PCODE: $00000C35 VOL: 0
; 0000 06DB 
; 0000 06DC // Declare your local variables here
; 0000 06DD 
; 0000 06DE // Input/Output Ports initialization
; 0000 06DF // Port A initialization
; 0000 06E0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 06E1 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00000C36 VOL: 0
;PCODE: $00000C37 VOL: 0
; 0000 06E2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 06E3 PORTA=(0<<PORTA7) | (0<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000C38 VOL: 0
;PCODE: $00000C39 VOL: 0
; 0000 06E4 
; 0000 06E5 // Port B initialization
; 0000 06E6 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 06E7 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000C3A VOL: 0
;PCODE: $00000C3B VOL: 0
; 0000 06E8 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 06E9 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000C3C VOL: 0
;PCODE: $00000C3D VOL: 0
; 0000 06EA 
; 0000 06EB // Port C initialization
; 0000 06EC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 06ED DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
;PCODE: $00000C3E VOL: 0
;PCODE: $00000C3F VOL: 0
; 0000 06EE // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=1
; 0000 06EF PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000C40 VOL: 0
;PCODE: $00000C41 VOL: 0
; 0000 06F0 
; 0000 06F1 // Port D initialization
; 0000 06F2 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 06F3 DDRD=(1<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000C42 VOL: 0
;PCODE: $00000C43 VOL: 0
; 0000 06F4 // State: Bit7=1 Bit6=P Bit5=0 Bit4=0 Bit3=0 Bit2=P Bit1=P Bit0=P
; 0000 06F5 PORTD=(1<<PORTD7) | (1<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $00000C44 VOL: 0
;PCODE: $00000C45 VOL: 0
; 0000 06F6 
; 0000 06F7 // Timer/Counter 0 initialization
; 0000 06F8 // Clock source: System Clock
; 0000 06F9 // Clock value: Timer 0 Stopped
; 0000 06FA // Mode: Normal top=0xFF
; 0000 06FB // OC0 output: Disconnected
; 0000 06FC TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000C46 VOL: 0
;PCODE: $00000C47 VOL: 0
; 0000 06FD TCNT0=0x00;
;PCODE: $00000C48 VOL: 0
;PCODE: $00000C49 VOL: 0
; 0000 06FE OCR0=0x00;
;PCODE: $00000C4A VOL: 0
;PCODE: $00000C4B VOL: 0
; 0000 06FF 
; 0000 0700 // Timer/Counter 1 initialization
; 0000 0701 // Clock source: System Clock
; 0000 0702 // Clock value: 125.000 kHz
; 0000 0703 // Mode: Normal top=0xFFFF
; 0000 0704 // OC1A output: Disconnected
; 0000 0705 // OC1B output: Disconnected
; 0000 0706 // Noise Canceler: Off
; 0000 0707 // Input Capture on Falling Edge
; 0000 0708 // Timer Period: 0.5 s
; 0000 0709 // Timer1 Overflow Interrupt: On
; 0000 070A // Input Capture Interrupt: Off
; 0000 070B // Compare A Match Interrupt: Off
; 0000 070C // Compare B Match Interrupt: Off
; 0000 070D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000C4C VOL: 0
;PCODE: $00000C4D VOL: 0
; 0000 070E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $00000C4E VOL: 0
;PCODE: $00000C4F VOL: 0
; 0000 070F TCNT1H=0x0B;
;PCODE: $00000C50 VOL: 0
;PCODE: $00000C51 VOL: 0
; 0000 0710 TCNT1L=0xDC;
;PCODE: $00000C52 VOL: 0
;PCODE: $00000C53 VOL: 0
; 0000 0711 ICR1H=0x00;
;PCODE: $00000C54 VOL: 0
;PCODE: $00000C55 VOL: 0
; 0000 0712 ICR1L=0x00;
;PCODE: $00000C56 VOL: 0
;PCODE: $00000C57 VOL: 0
; 0000 0713 OCR1AH=0x00;
;PCODE: $00000C58 VOL: 0
;PCODE: $00000C59 VOL: 0
; 0000 0714 OCR1AL=0x00;
;PCODE: $00000C5A VOL: 0
;PCODE: $00000C5B VOL: 0
; 0000 0715 OCR1BH=0x00;
;PCODE: $00000C5C VOL: 0
;PCODE: $00000C5D VOL: 0
; 0000 0716 OCR1BL=0x00;
;PCODE: $00000C5E VOL: 0
;PCODE: $00000C5F VOL: 0
; 0000 0717 
; 0000 0718 // Timer/Counter 2 initialization
; 0000 0719 // Clock source: System Clock
; 0000 071A // Clock value: Timer2 Stopped
; 0000 071B // Mode: Normal top=0xFF
; 0000 071C // OC2 output: Disconnected
; 0000 071D ASSR=0<<AS2;
;PCODE: $00000C60 VOL: 0
;PCODE: $00000C61 VOL: 0
; 0000 071E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000C62 VOL: 0
;PCODE: $00000C63 VOL: 0
; 0000 071F TCNT2=0x00;
;PCODE: $00000C64 VOL: 0
;PCODE: $00000C65 VOL: 0
; 0000 0720 OCR2=0x00;
;PCODE: $00000C66 VOL: 0
;PCODE: $00000C67 VOL: 0
; 0000 0721 
; 0000 0722 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0723 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000C68 VOL: 0
;PCODE: $00000C69 VOL: 0
; 0000 0724 
; 0000 0725 // External Interrupt(s) initialization
; 0000 0726 // INT0: Off
; 0000 0727 // INT1: Off
; 0000 0728 // INT2: Off
; 0000 0729 
; 0000 072A // USART initialization
; 0000 072B // USART disabled
; 0000 072C UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000C6A VOL: 0
;PCODE: $00000C6B VOL: 0
; 0000 072D 
; 0000 072E // Analog Comparator initialization
; 0000 072F // Analog Comparator: Off
; 0000 0730 // The Analog Comparator's positive input is
; 0000 0731 // connected to the AIN0 pin
; 0000 0732 // The Analog Comparator's negative input is
; 0000 0733 // connected to the AIN1 pin
; 0000 0734 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000C6C VOL: 0
;PCODE: $00000C6D VOL: 0
; 0000 0735 SFIOR=(0<<ACME);
;PCODE: $00000C6E VOL: 0
;PCODE: $00000C6F VOL: 0
; 0000 0736 
; 0000 0737 // ADC initialization
; 0000 0738 // ADC disabled
; 0000 0739 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000C70 VOL: 0
;PCODE: $00000C71 VOL: 0
; 0000 073A 
; 0000 073B // SPI initialization
; 0000 073C // SPI disabled
; 0000 073D SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000C72 VOL: 0
;PCODE: $00000C73 VOL: 0
; 0000 073E 
; 0000 073F // TWI initialization
; 0000 0740 // TWI disabled
; 0000 0741 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000C74 VOL: 0
;PCODE: $00000C75 VOL: 0
; 0000 0742 
; 0000 0743 // External Interrupt(s) initialization
; 0000 0744 // INT0: On
; 0000 0745 // INT0 Mode: Falling Edge
; 0000 0746 // INT1: Off
; 0000 0747 // INT2: Off
; 0000 0748 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000C76 VOL: 0
;PCODE: $00000C77 VOL: 0
;PCODE: $00000C78 VOL: 0
; 0000 0749 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000C79 VOL: 0
;PCODE: $00000C7A VOL: 0
; 0000 074A MCUCSR=(0<<ISC2);
;PCODE: $00000C7B VOL: 0
;PCODE: $00000C7C VOL: 0
; 0000 074B GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000C7D VOL: 0
;PCODE: $00000C7E VOL: 0
; 0000 074C 
; 0000 074D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 074E TIMSK=0x00;
;PCODE: $00000C7F VOL: 0
;PCODE: $00000C80 VOL: 0
; 0000 074F /*
; 0000 0750 // USART initialization
; 0000 0751 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0752 // USART Receiver: On
; 0000 0753 // USART Transmitter: On
; 0000 0754 // USART Mode: Asynchronous
; 0000 0755 // USART Baud Rate: 9600
; 0000 0756 UCSRA=0x00;
; 0000 0757 UCSRB=0xD8;
; 0000 0758 UCSRC=0x86;
; 0000 0759 UBRRH=0x00;
; 0000 075A UBRRL=0x47;
; 0000 075B */
; 0000 075C // Analog Comparator initialization
; 0000 075D // Analog Comparator: Off
; 0000 075E // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 075F ACSR=0x80;
;PCODE: $00000C81 VOL: 0
;PCODE: $00000C82 VOL: 0
; 0000 0760 SFIOR=0x00;
;PCODE: $00000C83 VOL: 0
;PCODE: $00000C84 VOL: 0
; 0000 0761 
; 0000 0762 
; 0000 0763 
; 0000 0764 // I2C Bus initialization
; 0000 0765 i2c_init();
;PCODE: $00000C85 VOL: 0
; 0000 0766 delay_ms(1000);
;PCODE: $00000C86 VOL: 0
;PCODE: $00000C87 VOL: 0
; 0000 0767 
; 0000 0768 // DS1307 Real Time Clock initialization
; 0000 0769 // Square wave output on pin SQW/OUT: Off
; 0000 076A // SQW/OUT pin state: 1
; 0000 076B rtc_init(0,1,0);
;PCODE: $00000C88 VOL: 0
;PCODE: $00000C89 VOL: 0
;PCODE: $00000C8A VOL: 0
;PCODE: $00000C8B VOL: 0
;PCODE: $00000C8C VOL: 0
;PCODE: $00000C8D VOL: 0
; 0000 076C delay_ms(500);
;PCODE: $00000C8E VOL: 0
;PCODE: $00000C8F VOL: 0
; 0000 076D // LCD module initialization
; 0000 076E lcd_init(16);
;PCODE: $00000C90 VOL: 0
;PCODE: $00000C91 VOL: 0
; 0000 076F delay_ms(100);
;PCODE: $00000C92 VOL: 0
;PCODE: $00000C93 VOL: 0
;PCODE: $00000C94 VOL: 0
; 0000 0770 //adc3421_init();
; 0000 0771 MPU6050_Init();
;PCODE: $00000C95 VOL: 0
; 0000 0772 boost_fl =1;
;PCODE: $00000C96 VOL: 0
;PCODE: $00000C97 VOL: 0
;PCODE: $00000C98 VOL: 0
; 0000 0773 float_fl = trickle_fl =0;
;PCODE: $00000C99 VOL: 0
;PCODE: $00000C9A VOL: 0
;PCODE: $00000C9B VOL: 0
;PCODE: $00000C9C VOL: 0
;PCODE: $00000C9D VOL: 0
;PCODE: $00000C9E VOL: 0
; 0000 0774 
; 0000 0775 define_char(char0,0);
;PCODE: $00000C9F VOL: 0
;PCODE: $00000CA0 VOL: 0
;PCODE: $00000CA1 VOL: 0
;PCODE: $00000CA2 VOL: 0
; 0000 0776 // Global enable interrupts
; 0000 0777 sleep_fl =0;
;PCODE: $00000CA3 VOL: 0
;PCODE: $00000CA4 VOL: 0
;PCODE: $00000CA5 VOL: 0
; 0000 0778 
; 0000 0779 }
;PCODE: $00000CA6 VOL: 0
;PCODE: $00000CA7 VOL: 0
;
;
;void WDT_ON()
; 0000 077D {
;PCODE: $00000CA8 VOL: 0
;PCODE: $00000CA9 VOL: 0
; 0000 077E     /*
; 0000 077F     Watchdog timer enables with typical timeout period 2.1
; 0000 0780     second.
; 0000 0781     */
; 0000 0782     WDTCR = (1<<WDE)|(1<<WDP2)|(1<<WDP1)|(1<<WDP0);
;PCODE: $00000CAA VOL: 0
;PCODE: $00000CAB VOL: 0
; 0000 0783 }
;PCODE: $00000CAC VOL: 0
;PCODE: $00000CAD VOL: 0
;
;void WDT_OFF()
; 0000 0786 {
;PCODE: $00000CAE VOL: 0
;PCODE: $00000CAF VOL: 0
; 0000 0787     /*
; 0000 0788     This function use for disable the watchdog timer.
; 0000 0789     */
; 0000 078A     WDTCR = (1<<WDTOE)|(1<<WDE);
;PCODE: $00000CB0 VOL: 0
;PCODE: $00000CB1 VOL: 0
; 0000 078B     WDTCR = 0x00;
;PCODE: $00000CB2 VOL: 0
;PCODE: $00000CB3 VOL: 0
; 0000 078C }
;PCODE: $00000CB4 VOL: 0
;PCODE: $00000CB5 VOL: 0
;
;
;
;
;void panel_movement(void)
; 0000 0792 {
;PCODE: $00000CB6 VOL: 0
;PCODE: $00000CB7 VOL: 0
; 0000 0793 //int panel_cutoff;
; 0000 0794 //bit flag_01;
; 0000 0795 int angle_old;
; 0000 0796 if(start_fl)
;PCODE: $00000CB8 VOL: 0
;PCODE: $00000CB9 VOL: 0
;	angle_old -> R16,R17
;PCODE: $00000CBA VOL: 0
;PCODE: $00000CBB VOL: 0
;PCODE: $00000CBC VOL: 0
; 0000 0797         {
; 0000 0798 
; 0000 0799         lcd_clear();
;PCODE: $00000CBD VOL: 0
; 0000 079A if (angle < target_angle)
;PCODE: $00000CBE VOL: 0
;PCODE: $00000CBF VOL: 0
;PCODE: $00000CC0 VOL: 0
;PCODE: $00000CC1 VOL: 0
;PCODE: $00000CC2 VOL: 0
; 0000 079B         {
; 0000 079C         timeout_cnt =0;
;PCODE: $00000CC3 VOL: 0
;PCODE: $00000CC4 VOL: 0
; 0000 079D         inf_fl =1;
;PCODE: $00000CC5 VOL: 0
;PCODE: $00000CC6 VOL: 0
;PCODE: $00000CC7 VOL: 0
; 0000 079E         angle_old = angle;
;PCODE: $00000CC8 VOL: 0
;PCODE: $00000CC9 VOL: 0
; 0000 079F //        panel_cutoff =0;
; 0000 07A0         while(angle < target_angle && inf_fl)
;PCODE: $00000CCA VOL: 0
;PCODE: $00000CCB VOL: 0
;PCODE: $00000CCC VOL: 0
;PCODE: $00000CCD VOL: 0
;PCODE: $00000CCE VOL: 0
;PCODE: $00000CCF VOL: 0
;PCODE: $00000CD0 VOL: 0
;PCODE: $00000CD1 VOL: 0
;PCODE: $00000CD2 VOL: 0
;PCODE: $00000CD3 VOL: 0
;PCODE: $00000CD4 VOL: 0
;PCODE: $00000CD5 VOL: 0
;PCODE: $00000CD6 VOL: 0
; 0000 07A1                 {
; 0000 07A2 /*
; 0000 07A3   // check routine for low voltage . if battery voltage drops below
; 0000 07A4   // 10.8V, then display low battery indication. if it recovers within 20 seconds
; 0000 07A5   // then, get back, else break.
; 0000 07A6                 if (adc_battery < cutoff_voltage)
; 0000 07A7                 panel_cutoff++;
; 0000 07A8                 else
; 0000 07A9                 panel_cutoff =0;        //reset
; 0000 07AA 
; 0000 07AB                 if (panel_cutoff > 100 && panel_cutoff < 5000) //15 seconds
; 0000 07AC                         {
; 0000 07AD                         lcd_gotoxy(0,1);
; 0000 07AE                         lcd_putsf("!!LOW BATTERY!!");
; 0000 07AF                         flag_01 =1;
; 0000 07B0 //                        delay_ms(500);
; 0000 07B1                         }
; 0000 07B2                         else
; 0000 07B3                         flag_01 =0; // to display low battery only
; 0000 07B4 
; 0000 07B5                 if (panel_cutoff > 5000)
; 0000 07B6                         {
; 0000 07B7                         lcd_clear();
; 0000 07B8                         err_fl =1;
; 0000 07B9 
; 0000 07BA                         lcd_putsf("LOW BATTERY");
; 0000 07BB                         lcd_gotoxy(0,1);
; 0000 07BC                         lcd_putsf("!!!ERROR!!!    ");
; 0000 07BD                         relay1=relay2 =0;
; 0000 07BE                         delay_ms(2000);
; 0000 07BF                         err_fl =0;
; 0000 07C0                         inf_fl =0;  // break while loop
; 0000 07C1                          }
; 0000 07C2 */
; 0000 07C3 /////////////////////////////////////////////////////////////////////
; 0000 07C4  //               delay_ms(1);
; 0000 07C5  //               adc_buffer = adc3421_read();
; 0000 07C6                 #asm("wdr")
;PCODE: $00000CD7 VOL: 0
	wdr
;PCODE: $00000CD8 VOL: 0
; 0000 07C7                 read_adc();
;PCODE: $00000CD9 VOL: 0
; 0000 07C8                 cal_angle();
;PCODE: $00000CDA VOL: 0
; 0000 07C9                 lcd_gotoxy(0,0);
;PCODE: $00000CDB VOL: 0
;PCODE: $00000CDC VOL: 0
;PCODE: $00000CDD VOL: 0
;PCODE: $00000CDE VOL: 0
; 0000 07CA                 lcd_putsf("ang: ");
;PCODE: $00000CDF VOL: 0
;PCODE: $00000CE0 VOL: 0
;PCODE: $00000CE1 VOL: 0
; 0000 07CB                 display_angle(angle);
;PCODE: $00000CE2 VOL: 0
;PCODE: $00000CE3 VOL: 0
; 0000 07CC                 lcd_gotoxy(0,1);
;PCODE: $00000CE4 VOL: 0
;PCODE: $00000CE5 VOL: 0
;PCODE: $00000CE6 VOL: 0
;PCODE: $00000CE7 VOL: 0
; 0000 07CD 
; 0000 07CE                 lcd_putsf("tar: ");
;PCODE: $00000CE8 VOL: 0
;PCODE: $00000CE9 VOL: 0
;PCODE: $00000CEA VOL: 0
; 0000 07CF                 display_angle(target_angle);
;PCODE: $00000CEB VOL: 0
;PCODE: $00000CEC VOL: 0
; 0000 07D0 
; 0000 07D1                 relay1=0;
;PCODE: $00000CED VOL: 0
;PCODE: $00000CEE VOL: 0
; 0000 07D2                 relay2=1;
;PCODE: $00000CEF VOL: 0
;PCODE: $00000CF0 VOL: 0
; 0000 07D3                 timeout_cnt++;
;PCODE: $00000CF1 VOL: 0
;PCODE: $00000CF2 VOL: 0
;PCODE: $00000CF3 VOL: 0
;PCODE: $00000CF4 VOL: 0
; 0000 07D4                 if(timeout_cnt >10000)      //once every 30 seconds
;PCODE: $00000CF5 VOL: 0
;PCODE: $00000CF6 VOL: 0
;PCODE: $00000CF7 VOL: 0
; 0000 07D5                         {
; 0000 07D6                         timeout_cnt =0;
;PCODE: $00000CF8 VOL: 0
;PCODE: $00000CF9 VOL: 0
; 0000 07D7                         if (!((angle < angle_old - 20) || (angle > angle_old +20)))
;PCODE: $00000CFA VOL: 0
;PCODE: $00000CFB VOL: 0
;PCODE: $00000CFC VOL: 0
;PCODE: $00000CFD VOL: 0
;PCODE: $00000CFE VOL: 0
;PCODE: $00000CFF VOL: 0
;PCODE: $00000D00 VOL: 0
;PCODE: $00000D01 VOL: 0
;PCODE: $00000D02 VOL: 0
;PCODE: $00000D03 VOL: 0
;PCODE: $00000D04 VOL: 0
;PCODE: $00000D05 VOL: 0
;PCODE: $00000D06 VOL: 0
;PCODE: $00000D07 VOL: 0
; 0000 07D8                             {
; 0000 07D9                             lcd_clear();
;PCODE: $00000D08 VOL: 0
; 0000 07DA                             err_fl =1;
;PCODE: $00000D09 VOL: 0
;PCODE: $00000D0A VOL: 0
;PCODE: $00000D0B VOL: 0
; 0000 07DB                             led3 =0;
;PCODE: $00000D0C VOL: 0
;PCODE: $00000D0D VOL: 0
; 0000 07DC                             lcd_putsf("mech. error");
;PCODE: $00000D0E VOL: 0
;PCODE: $00000D0F VOL: 0
;PCODE: $00000D10 VOL: 0
; 0000 07DD                             relay1=relay2 =0;
;PCODE: $00000D11 VOL: 0
;PCODE: $00000D12 VOL: 0
;PCODE: $00000D13 VOL: 0
;PCODE: $00000D14 VOL: 0
; 0000 07DE                             delay_ms(3000);
;PCODE: $00000D15 VOL: 0
;PCODE: $00000D16 VOL: 0
; 0000 07DF                             err_fl =0;
;PCODE: $00000D17 VOL: 0
;PCODE: $00000D18 VOL: 0
;PCODE: $00000D19 VOL: 0
; 0000 07E0                             led3  =1;
;PCODE: $00000D1A VOL: 0
;PCODE: $00000D1B VOL: 0
; 0000 07E1                             inf_fl =0;  // break while loop
;PCODE: $00000D1C VOL: 0
;PCODE: $00000D1D VOL: 0
;PCODE: $00000D1E VOL: 0
; 0000 07E2                             }
; 0000 07E3                         else
;PCODE: $00000D1F VOL: 0
;PCODE: $00000D20 VOL: 0
; 0000 07E4                             {
; 0000 07E5                             angle_old = angle;
;PCODE: $00000D21 VOL: 0
;PCODE: $00000D22 VOL: 0
; 0000 07E6                             }
;PCODE: $00000D23 VOL: 0
; 0000 07E7                         }
; 0000 07E8                 }
;PCODE: $00000D24 VOL: 0
;PCODE: $00000D25 VOL: 0
;PCODE: $00000D26 VOL: 0
; 0000 07E9         start_fl =0;
;PCODE: $00000D27 VOL: 0
;PCODE: $00000D28 VOL: 0
;PCODE: $00000D29 VOL: 0
; 0000 07EA         end_fl =1;
;PCODE: $00000D2A VOL: 0
;PCODE: $00000D2B VOL: 0
;PCODE: $00000D2C VOL: 0
; 0000 07EB         relay1=relay2=0;
;PCODE: $00000D2D VOL: 0
;PCODE: $00000D2E VOL: 0
;PCODE: $00000D2F VOL: 0
;PCODE: $00000D30 VOL: 0
; 0000 07EC         }
; 0000 07ED else if (angle > target_angle +20)     //hysterisis of 2 degrees before action
;PCODE: $00000D31 VOL: 0
;PCODE: $00000D32 VOL: 0
;PCODE: $00000D33 VOL: 0
;PCODE: $00000D34 VOL: 0
;PCODE: $00000D35 VOL: 0
;PCODE: $00000D36 VOL: 0
;PCODE: $00000D37 VOL: 0
;PCODE: $00000D38 VOL: 0
; 0000 07EE         {
; 0000 07EF         timeout_cnt =0;
;PCODE: $00000D39 VOL: 0
;PCODE: $00000D3A VOL: 0
; 0000 07F0         inf_fl =1;
;PCODE: $00000D3B VOL: 0
;PCODE: $00000D3C VOL: 0
;PCODE: $00000D3D VOL: 0
; 0000 07F1         angle_old = angle;
;PCODE: $00000D3E VOL: 0
;PCODE: $00000D3F VOL: 0
; 0000 07F2  //       panel_cutoff =0;
; 0000 07F3         while(angle > target_angle && inf_fl)
;PCODE: $00000D40 VOL: 0
;PCODE: $00000D41 VOL: 0
;PCODE: $00000D42 VOL: 0
;PCODE: $00000D43 VOL: 0
;PCODE: $00000D44 VOL: 0
;PCODE: $00000D45 VOL: 0
;PCODE: $00000D46 VOL: 0
;PCODE: $00000D47 VOL: 0
;PCODE: $00000D48 VOL: 0
;PCODE: $00000D49 VOL: 0
;PCODE: $00000D4A VOL: 0
;PCODE: $00000D4B VOL: 0
;PCODE: $00000D4C VOL: 0
; 0000 07F4                 {
; 0000 07F5 /*
; 0000 07F6   // check routine for low voltage . if battery voltage drops below
; 0000 07F7   // 10.8V, then display low battery indication. if it recovers within 20 seconds
; 0000 07F8   // then, get back, else break.
; 0000 07F9                 if (adc_battery < cutoff_voltage)
; 0000 07FA                 panel_cutoff++;
; 0000 07FB                 else
; 0000 07FC                 panel_cutoff =0;        //reset
; 0000 07FD 
; 0000 07FE                 if (panel_cutoff > 100 && panel_cutoff < 5000) //15 seconds
; 0000 07FF                         {
; 0000 0800                         lcd_gotoxy(0,1);
; 0000 0801                         lcd_putsf("!!LOW BATTERY!!");
; 0000 0802                         flag_01 =1;
; 0000 0803 //                        delay_ms(500);
; 0000 0804                         }
; 0000 0805                 else
; 0000 0806                         flag_01 =0;
; 0000 0807                 if (panel_cutoff > 5000)
; 0000 0808                         {
; 0000 0809                         panel_cutoff =0;
; 0000 080A                         lcd_clear();
; 0000 080B                         err_fl =1;
; 0000 080C                         lcd_putsf("LOW BATTERY");
; 0000 080D                         lcd_gotoxy(0,1);
; 0000 080E                         lcd_putsf("!!!ERROR!!!    ");
; 0000 080F                         relay1=relay2 =0;
; 0000 0810                         delay_ms(2000);
; 0000 0811                         err_fl =0;
; 0000 0812                         inf_fl =0;  // break while loop
; 0000 0813                          }
; 0000 0814 */
; 0000 0815 /////////////////////////////////////////////////////////////////////
; 0000 0816 //                delay_ms(1);
; 0000 0817 //                adc_buffer = adc3421_read();
; 0000 0818                 #asm("wdr")
;PCODE: $00000D4D VOL: 0
	wdr
;PCODE: $00000D4E VOL: 0
; 0000 0819                 read_adc();
;PCODE: $00000D4F VOL: 0
; 0000 081A                 cal_angle();
;PCODE: $00000D50 VOL: 0
; 0000 081B                 lcd_gotoxy(0,0);
;PCODE: $00000D51 VOL: 0
;PCODE: $00000D52 VOL: 0
;PCODE: $00000D53 VOL: 0
;PCODE: $00000D54 VOL: 0
; 0000 081C                 lcd_putsf("ang: ");
;PCODE: $00000D55 VOL: 0
;PCODE: $00000D56 VOL: 0
;PCODE: $00000D57 VOL: 0
; 0000 081D                 display_angle(angle);
;PCODE: $00000D58 VOL: 0
;PCODE: $00000D59 VOL: 0
; 0000 081E                 lcd_gotoxy(0,1);
;PCODE: $00000D5A VOL: 0
;PCODE: $00000D5B VOL: 0
;PCODE: $00000D5C VOL: 0
;PCODE: $00000D5D VOL: 0
; 0000 081F 
; 0000 0820                 lcd_putsf("tar: ");
;PCODE: $00000D5E VOL: 0
;PCODE: $00000D5F VOL: 0
;PCODE: $00000D60 VOL: 0
; 0000 0821                 display_angle(target_angle);
;PCODE: $00000D61 VOL: 0
;PCODE: $00000D62 VOL: 0
; 0000 0822 
; 0000 0823                 relay1=1;
;PCODE: $00000D63 VOL: 0
;PCODE: $00000D64 VOL: 0
; 0000 0824                 relay2=0;
;PCODE: $00000D65 VOL: 0
;PCODE: $00000D66 VOL: 0
; 0000 0825                 timeout_cnt++;
;PCODE: $00000D67 VOL: 0
;PCODE: $00000D68 VOL: 0
;PCODE: $00000D69 VOL: 0
;PCODE: $00000D6A VOL: 0
; 0000 0826                 if(timeout_cnt >10000)
;PCODE: $00000D6B VOL: 0
;PCODE: $00000D6C VOL: 0
;PCODE: $00000D6D VOL: 0
; 0000 0827                         {
; 0000 0828                         timeout_cnt =0;
;PCODE: $00000D6E VOL: 0
;PCODE: $00000D6F VOL: 0
; 0000 0829                         if (!((angle < angle_old - 20) || (angle > angle_old +20)))
;PCODE: $00000D70 VOL: 0
;PCODE: $00000D71 VOL: 0
;PCODE: $00000D72 VOL: 0
;PCODE: $00000D73 VOL: 0
;PCODE: $00000D74 VOL: 0
;PCODE: $00000D75 VOL: 0
;PCODE: $00000D76 VOL: 0
;PCODE: $00000D77 VOL: 0
;PCODE: $00000D78 VOL: 0
;PCODE: $00000D79 VOL: 0
;PCODE: $00000D7A VOL: 0
;PCODE: $00000D7B VOL: 0
;PCODE: $00000D7C VOL: 0
;PCODE: $00000D7D VOL: 0
; 0000 082A                             {
; 0000 082B                              lcd_clear();
;PCODE: $00000D7E VOL: 0
; 0000 082C                             err_fl =1;
;PCODE: $00000D7F VOL: 0
;PCODE: $00000D80 VOL: 0
;PCODE: $00000D81 VOL: 0
; 0000 082D                             led3 =0;
;PCODE: $00000D82 VOL: 0
;PCODE: $00000D83 VOL: 0
; 0000 082E                             lcd_putsf("mech. error");
;PCODE: $00000D84 VOL: 0
;PCODE: $00000D85 VOL: 0
;PCODE: $00000D86 VOL: 0
; 0000 082F                             relay1=relay2 =0;
;PCODE: $00000D87 VOL: 0
;PCODE: $00000D88 VOL: 0
;PCODE: $00000D89 VOL: 0
;PCODE: $00000D8A VOL: 0
; 0000 0830                             delay_ms(3000);
;PCODE: $00000D8B VOL: 0
;PCODE: $00000D8C VOL: 0
; 0000 0831                             err_fl =0;
;PCODE: $00000D8D VOL: 0
;PCODE: $00000D8E VOL: 0
;PCODE: $00000D8F VOL: 0
; 0000 0832                             led3 =1;
;PCODE: $00000D90 VOL: 0
;PCODE: $00000D91 VOL: 0
; 0000 0833                             inf_fl =0;  // break while loop
;PCODE: $00000D92 VOL: 0
;PCODE: $00000D93 VOL: 0
;PCODE: $00000D94 VOL: 0
; 0000 0834                             }
; 0000 0835                         else
;PCODE: $00000D95 VOL: 0
;PCODE: $00000D96 VOL: 0
; 0000 0836                             {
; 0000 0837                             angle_old = angle;
;PCODE: $00000D97 VOL: 0
;PCODE: $00000D98 VOL: 0
; 0000 0838                             }
;PCODE: $00000D99 VOL: 0
; 0000 0839 
; 0000 083A                         }
; 0000 083B                 }
;PCODE: $00000D9A VOL: 0
;PCODE: $00000D9B VOL: 0
;PCODE: $00000D9C VOL: 0
; 0000 083C         start_fl =0;
;PCODE: $00000D9D VOL: 0
;PCODE: $00000D9E VOL: 0
;PCODE: $00000D9F VOL: 0
; 0000 083D         end_fl =1;
;PCODE: $00000DA0 VOL: 0
;PCODE: $00000DA1 VOL: 0
;PCODE: $00000DA2 VOL: 0
; 0000 083E         relay1=relay2=0;
;PCODE: $00000DA3 VOL: 0
;PCODE: $00000DA4 VOL: 0
;PCODE: $00000DA5 VOL: 0
;PCODE: $00000DA6 VOL: 0
; 0000 083F         }
; 0000 0840 else
;PCODE: $00000DA7 VOL: 0
;PCODE: $00000DA8 VOL: 0
; 0000 0841         start_fl =0;
;PCODE: $00000DA9 VOL: 0
;PCODE: $00000DAA VOL: 0
;PCODE: $00000DAB VOL: 0
; 0000 0842 
; 0000 0843         end_fl =1;
;PCODE: $00000DAC VOL: 0
;PCODE: $00000DAD VOL: 0
;PCODE: $00000DAE VOL: 0
;PCODE: $00000DAF VOL: 0
;PCODE: $00000DB0 VOL: 0
; 0000 0844         relay1=relay2=0;
;PCODE: $00000DB1 VOL: 0
;PCODE: $00000DB2 VOL: 0
;PCODE: $00000DB3 VOL: 0
;PCODE: $00000DB4 VOL: 0
; 0000 0845 
; 0000 0846         }
; 0000 0847 }
;PCODE: $00000DB5 VOL: 0
;PCODE: $00000DB6 VOL: 0
;PCODE: $00000DB7 VOL: 0
;PCODE: $00000DB8 VOL: 0
;
;/*
;void check_print(void)
;{
;int i,j=0;
;if(printkey_fl)
;    {
;    lcd_clear();
;    lcd_putsf("printing");
;    lcd_gotoxy(0,1);
;    printkey_fl =0;
;    if (record_cnt>13)
;        {
;            #asm("cli")
;        putchar(0x0a);
;        putchar(0x0d);
;        putsf("angle  target  time     date       PV   chargecur.   batvolt");
;//        putchar(0x0a);
;//        putchar(0x0d);
;        for(i=0;i<=(record_cnt-1);i+=14)
;            {
;            j++;
;            if (j>=15)                                      //lower display printing algo
;                        {
;                        j=0;
;                        lcd_gotoxy(0,1);
;                        lcd_putsf("               ");
;                        lcd_gotoxy(0,1);
;                        }
;            lcd_putchar('.');
;            read_2464(i);
;            delay_ms(200);
;            putchar((record_buffer[0]/10)+48);
;            putchar((record_buffer[0]%10)+48);
;            putchar((record_buffer[1]/10)+48);
;            putchar('.');
;            putchar((record_buffer[1]%10)+48);
;            putchar(' ');
;            putchar(' ');
;
;            putchar((record_buffer[2]/10)+48);
;            putchar((record_buffer[2]%10)+48);
;            putchar((record_buffer[3]/10)+48);
;            putchar('.');
;            putchar((record_buffer[3]%10)+48);
;            putchar(' ');
;            putchar(' ');
;
;            putchar((record_buffer[4]/10)+48);
;            putchar((record_buffer[4]%10)+48);
;            putchar(':');
;            putchar((record_buffer[5]/10)+48);
;            putchar((record_buffer[5]%10)+48);
;            putchar(' ');
;            putchar(' ');
;
;            putchar((record_buffer[6]/10)+48);
;            putchar((record_buffer[6]%10)+48);
;            putchar('-');
;            putchar((record_buffer[7]/10)+48);
;            putchar((record_buffer[7]%10)+48);
;            putchar('-');
;            putchar('2');
;            putchar('0');
;            putchar('1');
;            putchar('3');
;
;            putchar(' ');
;            putchar(' ');
;
;            putchar((record_buffer[8]/10)+48);
;            putchar((record_buffer[8]%10)+48);
;            putchar('.');
;            putchar((record_buffer[9]/10)+48);
;            putchar((record_buffer[9]%10)+48);
;            putchar('V');
;            putchar(' ');
;
;            putchar((record_buffer[10]/10)+48);
;            putchar('.');
;            putchar((record_buffer[10]%10)+48);
;            putchar((record_buffer[11]/10)+48);
;            putchar((record_buffer[11]%10)+48);
;            putchar('A');
;            putchar(' ');
;
;            putchar((record_buffer[12]/10)+48);
;            putchar((record_buffer[12]%10)+48);
;            putchar('.');
;            putchar((record_buffer[13]/10)+48);
;            putchar((record_buffer[13]%10)+48);
;            putchar('V');
;            putchar(' ');
;            putsf(" ");//new line character
;
;            }
;        #asm("sei")
;        lcd_clear();
;//        record_cnt =0;          //reset record count to 00;
;        }
;
;    }
;}
;*/
;
;/*
;void error_check()
;{
;if (adc_pvolt < 1000 || adc_battery <300)
;err_fl1 = 1;
;else
;err_fl1=0;
;if (adc_battery < cutoff_voltage)
;err_fl2 =1;
;if(err_fl2 && adc_battery > reconnect_voltage)//hysterisis for reconnect
;err_fl2 =0;
;}
;*/
;void led_check()
; 0000 08BF {
;PCODE: $00000DB9 VOL: 0
;PCODE: $00000DBA VOL: 0
; 0000 08C0 led2=~relay1;
;PCODE: $00000DBB VOL: 0
;PCODE: $00000DBC VOL: 0
;PCODE: $00000DBD VOL: 0
;PCODE: $00000DBE VOL: 0
;PCODE: $00000DBF VOL: 0
;PCODE: $00000DC0 VOL: 0
;PCODE: $00000DC1 VOL: 0
;PCODE: $00000DC2 VOL: 0
;PCODE: $00000DC3 VOL: 0
;PCODE: $00000DC4 VOL: 0
; 0000 08C1 led1=~relay2;
;PCODE: $00000DC5 VOL: 0
;PCODE: $00000DC6 VOL: 0
;PCODE: $00000DC7 VOL: 0
;PCODE: $00000DC8 VOL: 0
;PCODE: $00000DC9 VOL: 0
;PCODE: $00000DCA VOL: 0
;PCODE: $00000DCB VOL: 0
;PCODE: $00000DCC VOL: 0
;PCODE: $00000DCD VOL: 0
;PCODE: $00000DCE VOL: 0
; 0000 08C2 led4 = led5 = led6 = 1;   // turn battery related leds off
;PCODE: $00000DCF VOL: 0
;PCODE: $00000DD0 VOL: 0
;PCODE: $00000DD1 VOL: 0
;PCODE: $00000DD2 VOL: 0
;PCODE: $00000DD3 VOL: 0
;PCODE: $00000DD4 VOL: 0
; 0000 08C3 
; 0000 08C4 if (err_fl )
;PCODE: $00000DD5 VOL: 0
;PCODE: $00000DD6 VOL: 0
;PCODE: $00000DD7 VOL: 0
; 0000 08C5 led3 =0;
;PCODE: $00000DD8 VOL: 0
;PCODE: $00000DD9 VOL: 0
; 0000 08C6 else
;PCODE: $00000DDA VOL: 0
;PCODE: $00000DDB VOL: 0
; 0000 08C7 
; 0000 08C8 led3 =1;
;PCODE: $00000DDC VOL: 0
;PCODE: $00000DDD VOL: 0
; 0000 08C9 /*
; 0000 08CA         if (!err_fl1)
; 0000 08CB             {
; 0000 08CC             if (boost_fl)
; 0000 08CD             led4 =0;
; 0000 08CE             else if (float_fl)
; 0000 08CF             led4 = led_blinkfl;
; 0000 08D0             else
; 0000 08D1             led4 =1;
; 0000 08D2             led5= ~trickle_fl;
; 0000 08D3           }
; 0000 08D4         else
; 0000 08D5             {
; 0000 08D6             led4 = led5 =1;
; 0000 08D7             }
; 0000 08D8        if (adc_battery < cutoff_voltage) led6 =0;       //low battery indication
; 0000 08D9        else led6 =1;
; 0000 08DA */
; 0000 08DB }
;PCODE: $00000DDE VOL: 0
;PCODE: $00000DDF VOL: 0
;PCODE: $00000DE0 VOL: 0
;
;
;/*
;void print_analog(int a,short int decimal)
;{
;putchar((a/1000)+48);
;a =a%1000;
;if (decimal == 1) putchar('.');
;putchar((a/100)+48);
;a = a%100;
;if (decimal == 2) putchar('.');
;putchar((a/10)+48);
;if (decimal ==3) putchar('.');
;putchar((a%10)+48);
;}
;*/
;/*
;void print_control()
;{
;char data;
;while (rx_counter)                     //receive buffer is not empty
;{
;data = getchar();
;switch (data)
;            {
;            case 'p':   printkey_fl =1;
;                        delay_ms(100);
;                        break;
;            case 'r':   putsf("no. of records stored :");
;                        print_analog(record_cnt/14,0);
;                        putsf(" ");
;                        break;
;            case 's':   record_cnt =0;
;                        putsf("records reset!!!");
;                        break;
;            case 'v':   putsf("Panel voltage:");
;                        print_analog(adc_pvolt,2);
;                        putchar('V');
;                        putsf(" ");
;                        break;
;            case 'b':   putsf("Battery voltage:");
;                        print_analog(adc_battery,2);
;                        putchar('V');
;                        putsf(" ");
;                        break;
;            case 'c':   putsf("charge current:");
;                        print_analog(adc_chargecurrent,2);
;                        putchar('A');
;                        putsf(" ");
;                        break;
;            case 'l':   log_fl=1;
;                        putsf("angle  target  time     date       PV   current  batvolt");
;                        putsf("logging started...");
;                        break;
;            case 'm':   log_fl=0;
;                        putsf("logging stopped");
;                        break;
;            default:    break;
;              }
;}
;}
;*/
;
;/*
;void print_realtime()
;{
;            print_analog(angle,3);
;            putchar('d');
;            putchar(' ');
;
;            print_analog(target_angle,3);
;            putchar('d');
;            putchar(' ');
;
;            putchar((hour/10)+48);
;            putchar((hour%10)+48);
;            putchar(':');
;            putchar((minute/10)+48);
;            putchar((minute%10)+48);
;            putchar(' ');
;            putchar(' ');
;
;            putchar((day/10)+48);
;            putchar((day%10)+48);
;            putchar('-');
;            putchar((month/10)+48);
;            putchar((month%10)+48);
;            putchar('-');
;            putchar('2');
;            putchar('0');
;            putchar('1');
;            putchar('3');
;
;            putchar(' ');
;            putchar(' ');
;
;            print_analog(adc_pvolt,2);
;            putchar('V');
;            putchar(' ');
;
;            print_analog(adc_chargecurrent,2);
;            putchar('A');
;            putchar(' ');
;
;            print_analog(adc_battery,2);
;            putchar('V');
;            putchar(' ');
;            putsf(" ");//new line character
;}
;
; */
;
;void rtc_reset(void)
; 0000 094D {
;PCODE: $00000DE1 VOL: 0
;PCODE: $00000DE2 VOL: 0
; 0000 094E //rtc_get_time(&hour,&minute,&second);
; 0000 094F //rtc_get_date(&week,&day,&month,&year);
; 0000 0950 
; 0000 0951 if (hour>23 || second > 59)
;PCODE: $00000DE3 VOL: 0
;PCODE: $00000DE4 VOL: 0
;PCODE: $00000DE5 VOL: 0
;PCODE: $00000DE6 VOL: 0
;PCODE: $00000DE7 VOL: 0
;PCODE: $00000DE8 VOL: 0
;PCODE: $00000DE9 VOL: 0
;PCODE: $00000DEA VOL: 0
; 0000 0952 {
; 0000 0953 #asm("cli");
;PCODE: $00000DEB VOL: 0
	cli
;PCODE: $00000DEC VOL: 0
; 0000 0954 rtc_init(0,1,0);
;PCODE: $00000DED VOL: 0
;PCODE: $00000DEE VOL: 0
;PCODE: $00000DEF VOL: 0
;PCODE: $00000DF0 VOL: 0
;PCODE: $00000DF1 VOL: 0
;PCODE: $00000DF2 VOL: 0
; 0000 0955 delay_ms(500);
;PCODE: $00000DF3 VOL: 0
;PCODE: $00000DF4 VOL: 0
; 0000 0956 rtc_set_date(e_week,e_day,e_month,e_year);
;PCODE: $00000DF5 VOL: 0
;PCODE: $00000DF6 VOL: 0
;PCODE: $00000DF7 VOL: 0
;PCODE: $00000DF8 VOL: 0
;PCODE: $00000DF9 VOL: 0
;PCODE: $00000DFA VOL: 0
;PCODE: $00000DFB VOL: 0
;PCODE: $00000DFC VOL: 0
;PCODE: $00000DFD VOL: 0
;PCODE: $00000DFE VOL: 0
;PCODE: $00000DFF VOL: 0
;PCODE: $00000E00 VOL: 0
;PCODE: $00000E01 VOL: 0
; 0000 0957 rtc_set_time(e_hour,e_minute,e_second);
;PCODE: $00000E02 VOL: 0
;PCODE: $00000E03 VOL: 0
;PCODE: $00000E04 VOL: 0
;PCODE: $00000E05 VOL: 0
;PCODE: $00000E06 VOL: 0
;PCODE: $00000E07 VOL: 0
;PCODE: $00000E08 VOL: 0
;PCODE: $00000E09 VOL: 0
;PCODE: $00000E0A VOL: 0
;PCODE: $00000E0B VOL: 0
; 0000 0958 #asm("sei");
;PCODE: $00000E0C VOL: 0
	sei
;PCODE: $00000E0D VOL: 0
; 0000 0959 }
; 0000 095A }
;PCODE: $00000E0E VOL: 0
;PCODE: $00000E0F VOL: 0
;PCODE: $00000E10 VOL: 0
;
;/*
;void WDT_off(void)
;{
;// reset WDT
;#asm("wdr")
;// Write logical one to WDTOE and WDE
;WDTCR |= (1<<4) | (1<<3);
;// Turn off WDT
;WDTCR = 0x00;
;}
;*/
;void main(void)
; 0000 0968 {
;PCODE: $00000E11 VOL: 0
; 0000 0969 // Declare your local variables here
; 0000 096A #asm("cli")
;PCODE: $00000E12 VOL: 0
	cli
;PCODE: $00000E13 VOL: 0
; 0000 096B //WDT_off();
; 0000 096C //#asm ("sei")
; 0000 096D 
; 0000 096E init();
;PCODE: $00000E14 VOL: 0
; 0000 096F // Global enable interrupts
; 0000 0970 #asm("sei")
;PCODE: $00000E15 VOL: 0
	sei
;PCODE: $00000E16 VOL: 0
; 0000 0971 delay_ms(250);
;PCODE: $00000E17 VOL: 0
;PCODE: $00000E18 VOL: 0
;PCODE: $00000E19 VOL: 0
; 0000 0972 rtc_get_time(&hour,&minute,&second);
;PCODE: $00000E1A VOL: 0
;PCODE: $00000E1B VOL: 0
;PCODE: $00000E1C VOL: 0
;PCODE: $00000E1D VOL: 0
;PCODE: $00000E1E VOL: 0
;PCODE: $00000E1F VOL: 0
; 0000 0973 rtc_get_date(&week,&day,&month,&year);   //pdi is weekday not used only for cvavr2.05
;PCODE: $00000E20 VOL: 0
;PCODE: $00000E21 VOL: 0
;PCODE: $00000E22 VOL: 0
;PCODE: $00000E23 VOL: 0
;PCODE: $00000E24 VOL: 0
;PCODE: $00000E25 VOL: 0
;PCODE: $00000E26 VOL: 0
;PCODE: $00000E27 VOL: 0
; 0000 0974 if (hour>24 || second>59)
;PCODE: $00000E28 VOL: 0
;PCODE: $00000E29 VOL: 0
;PCODE: $00000E2A VOL: 0
;PCODE: $00000E2B VOL: 0
;PCODE: $00000E2C VOL: 0
;PCODE: $00000E2D VOL: 0
;PCODE: $00000E2E VOL: 0
;PCODE: $00000E2F VOL: 0
; 0000 0975 {
; 0000 0976 rtc_reset();
;PCODE: $00000E30 VOL: 0
; 0000 0977 }
; 0000 0978 else
;PCODE: $00000E31 VOL: 0
;PCODE: $00000E32 VOL: 0
; 0000 0979 {
; 0000 097A //if valid rtc data, store the data in eeprom for backup
; 0000 097B e_hour = hour;
;PCODE: $00000E33 VOL: 0
;PCODE: $00000E34 VOL: 0
;PCODE: $00000E35 VOL: 0
; 0000 097C e_minute = minute;
;PCODE: $00000E36 VOL: 0
;PCODE: $00000E37 VOL: 0
;PCODE: $00000E38 VOL: 0
; 0000 097D e_second = second;
;PCODE: $00000E39 VOL: 0
;PCODE: $00000E3A VOL: 0
;PCODE: $00000E3B VOL: 0
; 0000 097E e_day = day;
;PCODE: $00000E3C VOL: 0
;PCODE: $00000E3D VOL: 0
;PCODE: $00000E3E VOL: 0
; 0000 097F e_month = month;
;PCODE: $00000E3F VOL: 0
;PCODE: $00000E40 VOL: 0
;PCODE: $00000E41 VOL: 0
; 0000 0980 e_year = year;
;PCODE: $00000E42 VOL: 0
;PCODE: $00000E43 VOL: 0
;PCODE: $00000E44 VOL: 0
; 0000 0981 }
;PCODE: $00000E45 VOL: 0
; 0000 0982 
; 0000 0983 WDT_ON();
;PCODE: $00000E46 VOL: 0
; 0000 0984 calibuser = calibfact =0;
;PCODE: $00000E47 VOL: 0
;PCODE: $00000E48 VOL: 0
;PCODE: $00000E49 VOL: 0
;PCODE: $00000E4A VOL: 0
;PCODE: $00000E4B VOL: 0
;PCODE: $00000E4C VOL: 0
; 0000 0985 //if (!key1 && key2 && key3 && key4) calibuser =1;
; 0000 0986 if (key1 && key2 && !key3 && !key4) calibfact =1;
;PCODE: $00000E4D VOL: 0
;PCODE: $00000E4E VOL: 0
;PCODE: $00000E4F VOL: 0
;PCODE: $00000E50 VOL: 0
;PCODE: $00000E51 VOL: 0
;PCODE: $00000E52 VOL: 0
;PCODE: $00000E53 VOL: 0
;PCODE: $00000E54 VOL: 0
;PCODE: $00000E55 VOL: 0
;PCODE: $00000E56 VOL: 0
;PCODE: $00000E57 VOL: 0
;PCODE: $00000E58 VOL: 0
;PCODE: $00000E59 VOL: 0
;PCODE: $00000E5A VOL: 0
;PCODE: $00000E5B VOL: 0
;PCODE: $00000E5C VOL: 0
;PCODE: $00000E5D VOL: 0
;PCODE: $00000E5E VOL: 0
;PCODE: $00000E5F VOL: 0
; 0000 0987 lcd_clear();
;PCODE: $00000E60 VOL: 0
;PCODE: $00000E61 VOL: 0
; 0000 0988 if (!calibfact)
;PCODE: $00000E62 VOL: 0
;PCODE: $00000E63 VOL: 0
;PCODE: $00000E64 VOL: 0
; 0000 0989 {
; 0000 098A lcd_putsf("* SINGLE AXIS  *");
;PCODE: $00000E65 VOL: 0
;PCODE: $00000E66 VOL: 0
;PCODE: $00000E67 VOL: 0
; 0000 098B lcd_gotoxy(0,1);
;PCODE: $00000E68 VOL: 0
;PCODE: $00000E69 VOL: 0
;PCODE: $00000E6A VOL: 0
;PCODE: $00000E6B VOL: 0
; 0000 098C lcd_putsf("*SOLAR TRACKER *");
;PCODE: $00000E6C VOL: 0
;PCODE: $00000E6D VOL: 0
;PCODE: $00000E6E VOL: 0
; 0000 098D delay_ms(2000);
;PCODE: $00000E6F VOL: 0
;PCODE: $00000E70 VOL: 0
; 0000 098E lcd_clear();
;PCODE: $00000E71 VOL: 0
; 0000 098F lcd_putsf("*   MICRON    *");
;PCODE: $00000E72 VOL: 0
;PCODE: $00000E73 VOL: 0
;PCODE: $00000E74 VOL: 0
; 0000 0990 lcd_gotoxy(0,1);
;PCODE: $00000E75 VOL: 0
;PCODE: $00000E76 VOL: 0
;PCODE: $00000E77 VOL: 0
;PCODE: $00000E78 VOL: 0
; 0000 0991 lcd_putsf("* INSTRUMENTS *");
;PCODE: $00000E79 VOL: 0
;PCODE: $00000E7A VOL: 0
;PCODE: $00000E7B VOL: 0
; 0000 0992 delay_ms(2000);
;PCODE: $00000E7C VOL: 0
;PCODE: $00000E7D VOL: 0
; 0000 0993 }
; 0000 0994 if(calibuser)
;PCODE: $00000E7E VOL: 0
;PCODE: $00000E7F VOL: 0
;PCODE: $00000E80 VOL: 0
;PCODE: $00000E81 VOL: 0
; 0000 0995 {
; 0000 0996 lcd_putsf("the panel ");
;PCODE: $00000E82 VOL: 0
;PCODE: $00000E83 VOL: 0
;PCODE: $00000E84 VOL: 0
; 0000 0997 lcd_gotoxy(0,1);
;PCODE: $00000E85 VOL: 0
;PCODE: $00000E86 VOL: 0
;PCODE: $00000E87 VOL: 0
;PCODE: $00000E88 VOL: 0
; 0000 0998 lcd_putsf("calibration mode");
;PCODE: $00000E89 VOL: 0
;PCODE: $00000E8A VOL: 0
;PCODE: $00000E8B VOL: 0
; 0000 0999 delay_ms(3000);
;PCODE: $00000E8C VOL: 0
;PCODE: $00000E8D VOL: 0
; 0000 099A lcd_gotoxy(0,0);
;PCODE: $00000E8E VOL: 0
;PCODE: $00000E8F VOL: 0
;PCODE: $00000E90 VOL: 0
;PCODE: $00000E91 VOL: 0
; 0000 099B lcd_putsf("inc > inch up");
;PCODE: $00000E92 VOL: 0
;PCODE: $00000E93 VOL: 0
;PCODE: $00000E94 VOL: 0
; 0000 099C lcd_gotoxy(0,1);
;PCODE: $00000E95 VOL: 0
;PCODE: $00000E96 VOL: 0
;PCODE: $00000E97 VOL: 0
;PCODE: $00000E98 VOL: 0
; 0000 099D lcd_putsf("dec > inch down");
;PCODE: $00000E99 VOL: 0
;PCODE: $00000E9A VOL: 0
;PCODE: $00000E9B VOL: 0
; 0000 099E delay_ms(3000);
;PCODE: $00000E9C VOL: 0
;PCODE: $00000E9D VOL: 0
; 0000 099F lcd_gotoxy(0,0);
;PCODE: $00000E9E VOL: 0
;PCODE: $00000E9F VOL: 0
;PCODE: $00000EA0 VOL: 0
;PCODE: $00000EA1 VOL: 0
; 0000 09A0 lcd_putsf("set-> enter low");
;PCODE: $00000EA2 VOL: 0
;PCODE: $00000EA3 VOL: 0
;PCODE: $00000EA4 VOL: 0
; 0000 09A1 lcd_gotoxy(0,1);
;PCODE: $00000EA5 VOL: 0
;PCODE: $00000EA6 VOL: 0
;PCODE: $00000EA7 VOL: 0
;PCODE: $00000EA8 VOL: 0
; 0000 09A2 lcd_putsf("shf-> enter high");
;PCODE: $00000EA9 VOL: 0
;PCODE: $00000EAA VOL: 0
;PCODE: $00000EAB VOL: 0
; 0000 09A3 delay_ms(3000);
;PCODE: $00000EAC VOL: 0
;PCODE: $00000EAD VOL: 0
; 0000 09A4 }
; 0000 09A5 if(calibfact)
;PCODE: $00000EAE VOL: 0
;PCODE: $00000EAF VOL: 0
;PCODE: $00000EB0 VOL: 0
;PCODE: $00000EB1 VOL: 0
; 0000 09A6 {
; 0000 09A7 lcd_putsf("adc: ");
;PCODE: $00000EB2 VOL: 0
;PCODE: $00000EB3 VOL: 0
;PCODE: $00000EB4 VOL: 0
; 0000 09A8 lcd_gotoxy(0,1);
;PCODE: $00000EB5 VOL: 0
;PCODE: $00000EB6 VOL: 0
;PCODE: $00000EB7 VOL: 0
;PCODE: $00000EB8 VOL: 0
; 0000 09A9 lcd_putsf("angle:");
;PCODE: $00000EB9 VOL: 0
;PCODE: $00000EBA VOL: 0
;PCODE: $00000EBB VOL: 0
; 0000 09AA }
; 0000 09AB 
; 0000 09AC 
; 0000 09AD OCR1A = 0x13f;
;PCODE: $00000EBC VOL: 0
;PCODE: $00000EBD VOL: 0
;PCODE: $00000EBE VOL: 0
; 0000 09AE //rtc_set_time(12,13,26);
; 0000 09AF delay_ms(10);
;PCODE: $00000EBF VOL: 0
;PCODE: $00000EC0 VOL: 0
;PCODE: $00000EC1 VOL: 0
; 0000 09B0 eeprom_transfer();
;PCODE: $00000EC2 VOL: 0
; 0000 09B1 adc_battery = 1300;     //default 13.00 v for low battery hysterisis initial condition.
;PCODE: $00000EC3 VOL: 0
;PCODE: $00000EC4 VOL: 0
; 0000 09B2 while (1)
;PCODE: $00000EC5 VOL: 0
; 0000 09B3 {
; 0000 09B4 #asm("wdr")             //reset watchdog timer
;PCODE: $00000EC6 VOL: 0
	wdr
;PCODE: $00000EC7 VOL: 0
; 0000 09B5 
; 0000 09B6 
; 0000 09B7 if (sleep_fl ==1)
;PCODE: $00000EC8 VOL: 0
;PCODE: $00000EC9 VOL: 0
;PCODE: $00000ECA VOL: 0
; 0000 09B8 {
; 0000 09B9 //sleep_enable();
; 0000 09BA //idle();
; 0000 09BB //delay_ms(500);
; 0000 09BC }
; 0000 09BD else
;PCODE: $00000ECB VOL: 0
;PCODE: $00000ECC VOL: 0
; 0000 09BE {
; 0000 09BF sleep_disable();
;PCODE: $00000ECD VOL: 0
; 0000 09C0         get_key();
;PCODE: $00000ECE VOL: 0
; 0000 09C1 //        ir_cnt++;
; 0000 09C2 //        if(ir_cnt>500)
; 0000 09C3 //        {
; 0000 09C4 //        ir_cnt =0;
; 0000 09C5 //        get_irkey();
; 0000 09C6 //        }
; 0000 09C7 //normal run mode with configuration setting and real time display on power on.
; 0000 09C8     if(!calibuser || !calibfact )
;PCODE: $00000ECF VOL: 0
;PCODE: $00000ED0 VOL: 0
;PCODE: $00000ED1 VOL: 0
;PCODE: $00000ED2 VOL: 0
;PCODE: $00000ED3 VOL: 0
;PCODE: $00000ED4 VOL: 0
;PCODE: $00000ED5 VOL: 0
;PCODE: $00000ED6 VOL: 0
; 0000 09C9      {
; 0000 09CA          rtc_reset();
;PCODE: $00000ED7 VOL: 0
; 0000 09CB         led_check();
;PCODE: $00000ED8 VOL: 0
; 0000 09CC         led2 = ~relay1;
;PCODE: $00000ED9 VOL: 0
;PCODE: $00000EDA VOL: 0
;PCODE: $00000EDB VOL: 0
;PCODE: $00000EDC VOL: 0
;PCODE: $00000EDD VOL: 0
;PCODE: $00000EDE VOL: 0
;PCODE: $00000EDF VOL: 0
;PCODE: $00000EE0 VOL: 0
;PCODE: $00000EE1 VOL: 0
;PCODE: $00000EE2 VOL: 0
; 0000 09CD         led1 = ~relay2;
;PCODE: $00000EE3 VOL: 0
;PCODE: $00000EE4 VOL: 0
;PCODE: $00000EE5 VOL: 0
;PCODE: $00000EE6 VOL: 0
;PCODE: $00000EE7 VOL: 0
;PCODE: $00000EE8 VOL: 0
;PCODE: $00000EE9 VOL: 0
;PCODE: $00000EEA VOL: 0
;PCODE: $00000EEB VOL: 0
;PCODE: $00000EEC VOL: 0
; 0000 09CE         check_mode();
;PCODE: $00000EED VOL: 0
; 0000 09CF         read_adc();
;PCODE: $00000EEE VOL: 0
; 0000 09D0         delay_ms(1);
;PCODE: $00000EEF VOL: 0
;PCODE: $00000EF0 VOL: 0
;PCODE: $00000EF1 VOL: 0
; 0000 09D1         target_cal();
;PCODE: $00000EF2 VOL: 0
; 0000 09D2         check_increment();
;PCODE: $00000EF3 VOL: 0
; 0000 09D3         check_decrement();
;PCODE: $00000EF4 VOL: 0
; 0000 09D4         check_shift();
;PCODE: $00000EF5 VOL: 0
; 0000 09D5         check_enter();
;PCODE: $00000EF6 VOL: 0
; 0000 09D6         blink_control();
;PCODE: $00000EF7 VOL: 0
; 0000 09D7         xyz++;
;PCODE: $00000EF8 VOL: 0
;PCODE: $00000EF9 VOL: 0
;PCODE: $00000EFA VOL: 0
;PCODE: $00000EFB VOL: 0
; 0000 09D8         if(xyz>10)
;PCODE: $00000EFC VOL: 0
;PCODE: $00000EFD VOL: 0
;PCODE: $00000EFE VOL: 0
; 0000 09D9             {
; 0000 09DA             xyz =0;
;PCODE: $00000EFF VOL: 0
;PCODE: $00000F00 VOL: 0
; 0000 09DB             rtc_int_fn();
;PCODE: $00000F01 VOL: 0
; 0000 09DC             }
; 0000 09DD         display_cnt++;
;PCODE: $00000F02 VOL: 0
;PCODE: $00000F03 VOL: 0
;PCODE: $00000F04 VOL: 0
;PCODE: $00000F05 VOL: 0
;PCODE: $00000F06 VOL: 0
; 0000 09DE         if (display_cnt > 100)
;PCODE: $00000F07 VOL: 0
;PCODE: $00000F08 VOL: 0
;PCODE: $00000F09 VOL: 0
; 0000 09DF                 {
; 0000 09E0                 display_cnt =0;
;PCODE: $00000F0A VOL: 0
;PCODE: $00000F0B VOL: 0
; 0000 09E1                 display_update();
;PCODE: $00000F0C VOL: 0
; 0000 09E2                 cal_angle();
;PCODE: $00000F0D VOL: 0
; 0000 09E3                 }
; 0000 09E4 
; 0000 09E5         if (mode==0 && !manual_fl ) panel_movement();
;PCODE: $00000F0E VOL: 0
;PCODE: $00000F0F VOL: 0
;PCODE: $00000F10 VOL: 0
;PCODE: $00000F11 VOL: 0
;PCODE: $00000F12 VOL: 0
;PCODE: $00000F13 VOL: 0
;PCODE: $00000F14 VOL: 0
;PCODE: $00000F15 VOL: 0
;PCODE: $00000F16 VOL: 0
;PCODE: $00000F17 VOL: 0
;PCODE: $00000F18 VOL: 0
;PCODE: $00000F19 VOL: 0
; 0000 09E6         if (manual_fl)
;PCODE: $00000F1A VOL: 0
;PCODE: $00000F1B VOL: 0
;PCODE: $00000F1C VOL: 0
;PCODE: $00000F1D VOL: 0
; 0000 09E7         {
; 0000 09E8             relay1 = ~key2;
;PCODE: $00000F1E VOL: 0
;PCODE: $00000F1F VOL: 0
;PCODE: $00000F20 VOL: 0
;PCODE: $00000F21 VOL: 0
;PCODE: $00000F22 VOL: 0
;PCODE: $00000F23 VOL: 0
;PCODE: $00000F24 VOL: 0
;PCODE: $00000F25 VOL: 0
;PCODE: $00000F26 VOL: 0
;PCODE: $00000F27 VOL: 0
; 0000 09E9             relay2 = ~key3;
;PCODE: $00000F28 VOL: 0
;PCODE: $00000F29 VOL: 0
;PCODE: $00000F2A VOL: 0
;PCODE: $00000F2B VOL: 0
;PCODE: $00000F2C VOL: 0
;PCODE: $00000F2D VOL: 0
;PCODE: $00000F2E VOL: 0
;PCODE: $00000F2F VOL: 0
;PCODE: $00000F30 VOL: 0
;PCODE: $00000F31 VOL: 0
; 0000 09EA         }
; 0000 09EB      }
;PCODE: $00000F32 VOL: 0
; 0000 09EC 
; 0000 09ED 
; 0000 09EE /////////////////////////////////////////////////////////
; 0000 09EF 
; 0000 09F0 
; 0000 09F1 //calibration mode for user to set start and end angles
; 0000 09F2     if(calibuser)
;PCODE: $00000F33 VOL: 0
;PCODE: $00000F34 VOL: 0
;PCODE: $00000F35 VOL: 0
;PCODE: $00000F36 VOL: 0
; 0000 09F3     {
; 0000 09F4     lcd_clear();
;PCODE: $00000F37 VOL: 0
; 0000 09F5     delay_ms(1);
;PCODE: $00000F38 VOL: 0
;PCODE: $00000F39 VOL: 0
;PCODE: $00000F3A VOL: 0
; 0000 09F6     lcd_putsf("Set Start Angle");
;PCODE: $00000F3B VOL: 0
;PCODE: $00000F3C VOL: 0
;PCODE: $00000F3D VOL: 0
; 0000 09F7     while(key4)
;PCODE: $00000F3E VOL: 0
;PCODE: $00000F3F VOL: 0
;PCODE: $00000F40 VOL: 0
;PCODE: $00000F41 VOL: 0
; 0000 09F8     {
; 0000 09F9 //    get_irkey();
; 0000 09FA     get_key();
;PCODE: $00000F42 VOL: 0
; 0000 09FB     delay_ms(1);
;PCODE: $00000F43 VOL: 0
;PCODE: $00000F44 VOL: 0
;PCODE: $00000F45 VOL: 0
; 0000 09FC //        error_check();
; 0000 09FD 
; 0000 09FE //    lcd_gotoxy(0,0);
; 0000 09FF //    lcd_putsf("Set Start Angle")
; 0000 0A00 
; 0000 0A01 //    put_message(zero_adc);
; 0000 0A02 //    lcd_putsf("   ");
; 0000 0A03 //    put_message(span_adc);
; 0000 0A04     lcd_gotoxy(0,1);
;PCODE: $00000F46 VOL: 0
;PCODE: $00000F47 VOL: 0
;PCODE: $00000F48 VOL: 0
;PCODE: $00000F49 VOL: 0
; 0000 0A05     lcd_putsf("angle:");
;PCODE: $00000F4A VOL: 0
;PCODE: $00000F4B VOL: 0
;PCODE: $00000F4C VOL: 0
; 0000 0A06 //    adc_buffer = adc3421_read();
; 0000 0A07     read_adc();
;PCODE: $00000F4D VOL: 0
; 0000 0A08     relay1 = ~key2;
;PCODE: $00000F4E VOL: 0
;PCODE: $00000F4F VOL: 0
;PCODE: $00000F50 VOL: 0
;PCODE: $00000F51 VOL: 0
;PCODE: $00000F52 VOL: 0
;PCODE: $00000F53 VOL: 0
;PCODE: $00000F54 VOL: 0
;PCODE: $00000F55 VOL: 0
;PCODE: $00000F56 VOL: 0
;PCODE: $00000F57 VOL: 0
; 0000 0A09     relay2 = ~key3;
;PCODE: $00000F58 VOL: 0
;PCODE: $00000F59 VOL: 0
;PCODE: $00000F5A VOL: 0
;PCODE: $00000F5B VOL: 0
;PCODE: $00000F5C VOL: 0
;PCODE: $00000F5D VOL: 0
;PCODE: $00000F5E VOL: 0
;PCODE: $00000F5F VOL: 0
;PCODE: $00000F60 VOL: 0
;PCODE: $00000F61 VOL: 0
; 0000 0A0A //    key2_fl = key3_fl =0;
; 0000 0A0B     cal_angle();
;PCODE: $00000F62 VOL: 0
; 0000 0A0C     display_angle(angle);
;PCODE: $00000F63 VOL: 0
;PCODE: $00000F64 VOL: 0
; 0000 0A0D     }
;PCODE: $00000F65 VOL: 0
;PCODE: $00000F66 VOL: 0
; 0000 0A0E     e_low_angle = low_angle = angle;
;PCODE: $00000F67 VOL: 0
;PCODE: $00000F68 VOL: 0
;PCODE: $00000F69 VOL: 0
;PCODE: $00000F6A VOL: 0
; 0000 0A0F     lcd_gotoxy(0,0);
;PCODE: $00000F6B VOL: 0
;PCODE: $00000F6C VOL: 0
;PCODE: $00000F6D VOL: 0
;PCODE: $00000F6E VOL: 0
; 0000 0A10     lcd_putsf("start angle ");
;PCODE: $00000F6F VOL: 0
;PCODE: $00000F70 VOL: 0
;PCODE: $00000F71 VOL: 0
; 0000 0A11     lcd_gotoxy(0,1);
;PCODE: $00000F72 VOL: 0
;PCODE: $00000F73 VOL: 0
;PCODE: $00000F74 VOL: 0
;PCODE: $00000F75 VOL: 0
; 0000 0A12     lcd_putsf("accepted!");
;PCODE: $00000F76 VOL: 0
;PCODE: $00000F77 VOL: 0
;PCODE: $00000F78 VOL: 0
; 0000 0A13     delay_ms(1500);
;PCODE: $00000F79 VOL: 0
;PCODE: $00000F7A VOL: 0
; 0000 0A14 
; 0000 0A15     lcd_clear();
;PCODE: $00000F7B VOL: 0
; 0000 0A16     lcd_putsf("Set End Angle");
;PCODE: $00000F7C VOL: 0
;PCODE: $00000F7D VOL: 0
;PCODE: $00000F7E VOL: 0
; 0000 0A17     while(key1)
;PCODE: $00000F7F VOL: 0
;PCODE: $00000F80 VOL: 0
;PCODE: $00000F81 VOL: 0
;PCODE: $00000F82 VOL: 0
; 0000 0A18     {
; 0000 0A19 //    get_irkey();
; 0000 0A1A     get_key();
;PCODE: $00000F83 VOL: 0
; 0000 0A1B     delay_ms(1);
;PCODE: $00000F84 VOL: 0
;PCODE: $00000F85 VOL: 0
;PCODE: $00000F86 VOL: 0
; 0000 0A1C //        error_check();
; 0000 0A1D 
; 0000 0A1E     lcd_gotoxy(0,1);
;PCODE: $00000F87 VOL: 0
;PCODE: $00000F88 VOL: 0
;PCODE: $00000F89 VOL: 0
;PCODE: $00000F8A VOL: 0
; 0000 0A1F     lcd_putsf("angle:");
;PCODE: $00000F8B VOL: 0
;PCODE: $00000F8C VOL: 0
;PCODE: $00000F8D VOL: 0
; 0000 0A20 //    adc_buffer = adc3421_read();
; 0000 0A21     read_adc();
;PCODE: $00000F8E VOL: 0
; 0000 0A22     relay1 = ~key2;
;PCODE: $00000F8F VOL: 0
;PCODE: $00000F90 VOL: 0
;PCODE: $00000F91 VOL: 0
;PCODE: $00000F92 VOL: 0
;PCODE: $00000F93 VOL: 0
;PCODE: $00000F94 VOL: 0
;PCODE: $00000F95 VOL: 0
;PCODE: $00000F96 VOL: 0
;PCODE: $00000F97 VOL: 0
;PCODE: $00000F98 VOL: 0
; 0000 0A23     relay2 = ~key3;
;PCODE: $00000F99 VOL: 0
;PCODE: $00000F9A VOL: 0
;PCODE: $00000F9B VOL: 0
;PCODE: $00000F9C VOL: 0
;PCODE: $00000F9D VOL: 0
;PCODE: $00000F9E VOL: 0
;PCODE: $00000F9F VOL: 0
;PCODE: $00000FA0 VOL: 0
;PCODE: $00000FA1 VOL: 0
;PCODE: $00000FA2 VOL: 0
; 0000 0A24 //    key2_fl = key3_fl =0;
; 0000 0A25     cal_angle();
;PCODE: $00000FA3 VOL: 0
; 0000 0A26     display_angle(angle);
;PCODE: $00000FA4 VOL: 0
;PCODE: $00000FA5 VOL: 0
; 0000 0A27     }
;PCODE: $00000FA6 VOL: 0
;PCODE: $00000FA7 VOL: 0
; 0000 0A28     e_high_angle = high_angle = angle;
;PCODE: $00000FA8 VOL: 0
;PCODE: $00000FA9 VOL: 0
;PCODE: $00000FAA VOL: 0
;PCODE: $00000FAB VOL: 0
; 0000 0A29     lcd_gotoxy(0,0);
;PCODE: $00000FAC VOL: 0
;PCODE: $00000FAD VOL: 0
;PCODE: $00000FAE VOL: 0
;PCODE: $00000FAF VOL: 0
; 0000 0A2A     lcd_putsf("end angle ");
;PCODE: $00000FB0 VOL: 0
;PCODE: $00000FB1 VOL: 0
;PCODE: $00000FB2 VOL: 0
; 0000 0A2B     lcd_gotoxy(0,1);
;PCODE: $00000FB3 VOL: 0
;PCODE: $00000FB4 VOL: 0
;PCODE: $00000FB5 VOL: 0
;PCODE: $00000FB6 VOL: 0
; 0000 0A2C     lcd_putsf("accepted! ");
;PCODE: $00000FB7 VOL: 0
;PCODE: $00000FB8 VOL: 0
;PCODE: $00000FB9 VOL: 0
; 0000 0A2D     delay_ms(3000);
;PCODE: $00000FBA VOL: 0
;PCODE: $00000FBB VOL: 0
; 0000 0A2E     calibuser =0;
;PCODE: $00000FBC VOL: 0
;PCODE: $00000FBD VOL: 0
;PCODE: $00000FBE VOL: 0
; 0000 0A2F     lcd_clear();
;PCODE: $00000FBF VOL: 0
; 0000 0A30     }
; 0000 0A31 ////////////////////////////////////////////////////////////////////
; 0000 0A32 
; 0000 0A33 
; 0000 0A34 
; 0000 0A35  // factory setting for inclinometer and pv/current input calibration.
; 0000 0A36 
; 0000 0A37    if(calibfact)
;PCODE: $00000FC0 VOL: 0
;PCODE: $00000FC1 VOL: 0
;PCODE: $00000FC2 VOL: 0
;PCODE: $00000FC3 VOL: 0
; 0000 0A38     {
; 0000 0A39     lcd_clear();
;PCODE: $00000FC4 VOL: 0
; 0000 0A3A     mux1 =1;
;PCODE: $00000FC5 VOL: 0
;PCODE: $00000FC6 VOL: 0
; 0000 0A3B     mux2 =0;
;PCODE: $00000FC7 VOL: 0
;PCODE: $00000FC8 VOL: 0
; 0000 0A3C     mux3 =1;
;PCODE: $00000FC9 VOL: 0
;PCODE: $00000FCA VOL: 0
; 0000 0A3D     delay_ms(250);
;PCODE: $00000FCB VOL: 0
;PCODE: $00000FCC VOL: 0
;PCODE: $00000FCD VOL: 0
; 0000 0A3E     while(key2)
;PCODE: $00000FCE VOL: 0
;PCODE: $00000FCF VOL: 0
;PCODE: $00000FD0 VOL: 0
;PCODE: $00000FD1 VOL: 0
; 0000 0A3F     {
; 0000 0A40     adc_buffer = adc3421_read();
;PCODE: $00000FD2 VOL: 0
;PCODE: $00000FD3 VOL: 0
;PCODE: $00000FD4 VOL: 0
; 0000 0A41     cal_angle();
;PCODE: $00000FD5 VOL: 0
; 0000 0A42     lcd_gotoxy(0,0);
;PCODE: $00000FD6 VOL: 0
;PCODE: $00000FD7 VOL: 0
;PCODE: $00000FD8 VOL: 0
;PCODE: $00000FD9 VOL: 0
; 0000 0A43     delay_ms(500);
;PCODE: $00000FDA VOL: 0
;PCODE: $00000FDB VOL: 0
; 0000 0A44     lcd_putsf("adc: ");
;PCODE: $00000FDC VOL: 0
;PCODE: $00000FDD VOL: 0
;PCODE: $00000FDE VOL: 0
; 0000 0A45     put_message(adc_buffer);
;PCODE: $00000FDF VOL: 0
;PCODE: $00000FE0 VOL: 0
; 0000 0A46     lcd_gotoxy(0,1);
;PCODE: $00000FE1 VOL: 0
;PCODE: $00000FE2 VOL: 0
;PCODE: $00000FE3 VOL: 0
;PCODE: $00000FE4 VOL: 0
; 0000 0A47     lcd_putsf("angle: ");
;PCODE: $00000FE5 VOL: 0
;PCODE: $00000FE6 VOL: 0
;PCODE: $00000FE7 VOL: 0
; 0000 0A48     display_angle(angle);
;PCODE: $00000FE8 VOL: 0
;PCODE: $00000FE9 VOL: 0
; 0000 0A49     }
;PCODE: $00000FEA VOL: 0
;PCODE: $00000FEB VOL: 0
; 0000 0A4A     e_zero_adc = zero_adc = adc_buffer;
;PCODE: $00000FEC VOL: 0
;PCODE: $00000FED VOL: 0
;PCODE: $00000FEE VOL: 0
;PCODE: $00000FEF VOL: 0
; 0000 0A4B     lcd_clear();
;PCODE: $00000FF0 VOL: 0
; 0000 0A4C     lcd_putsf("zero angle ");
;PCODE: $00000FF1 VOL: 0
;PCODE: $00000FF2 VOL: 0
;PCODE: $00000FF3 VOL: 0
; 0000 0A4D     lcd_gotoxy(0,1);
;PCODE: $00000FF4 VOL: 0
;PCODE: $00000FF5 VOL: 0
;PCODE: $00000FF6 VOL: 0
;PCODE: $00000FF7 VOL: 0
; 0000 0A4E     lcd_putsf("accepted! ");
;PCODE: $00000FF8 VOL: 0
;PCODE: $00000FF9 VOL: 0
;PCODE: $00000FFA VOL: 0
; 0000 0A4F     delay_ms(3000);
;PCODE: $00000FFB VOL: 0
;PCODE: $00000FFC VOL: 0
; 0000 0A50     lcd_clear();
;PCODE: $00000FFD VOL: 0
; 0000 0A51     delay_ms(250);
;PCODE: $00000FFE VOL: 0
;PCODE: $00000FFF VOL: 0
;PCODE: $00001000 VOL: 0
; 0000 0A52     while(key1)
;PCODE: $00001001 VOL: 0
;PCODE: $00001002 VOL: 0
;PCODE: $00001003 VOL: 0
;PCODE: $00001004 VOL: 0
; 0000 0A53     {
; 0000 0A54     adc_buffer = adc3421_read();
;PCODE: $00001005 VOL: 0
;PCODE: $00001006 VOL: 0
;PCODE: $00001007 VOL: 0
; 0000 0A55     cal_angle();
;PCODE: $00001008 VOL: 0
; 0000 0A56     lcd_gotoxy(0,0);
;PCODE: $00001009 VOL: 0
;PCODE: $0000100A VOL: 0
;PCODE: $0000100B VOL: 0
;PCODE: $0000100C VOL: 0
; 0000 0A57     delay_ms(500);
;PCODE: $0000100D VOL: 0
;PCODE: $0000100E VOL: 0
; 0000 0A58     lcd_putsf("adc: ");
;PCODE: $0000100F VOL: 0
;PCODE: $00001010 VOL: 0
;PCODE: $00001011 VOL: 0
; 0000 0A59     put_message(adc_buffer);
;PCODE: $00001012 VOL: 0
;PCODE: $00001013 VOL: 0
; 0000 0A5A     lcd_gotoxy(0,1);
;PCODE: $00001014 VOL: 0
;PCODE: $00001015 VOL: 0
;PCODE: $00001016 VOL: 0
;PCODE: $00001017 VOL: 0
; 0000 0A5B     lcd_putsf("angle: ");
;PCODE: $00001018 VOL: 0
;PCODE: $00001019 VOL: 0
;PCODE: $0000101A VOL: 0
; 0000 0A5C     display_angle(angle);
;PCODE: $0000101B VOL: 0
;PCODE: $0000101C VOL: 0
; 0000 0A5D     }
;PCODE: $0000101D VOL: 0
;PCODE: $0000101E VOL: 0
; 0000 0A5E     e_span_adc = span_adc = adc_buffer;
;PCODE: $0000101F VOL: 0
;PCODE: $00001020 VOL: 0
;PCODE: $00001021 VOL: 0
;PCODE: $00001022 VOL: 0
; 0000 0A5F     lcd_clear();
;PCODE: $00001023 VOL: 0
; 0000 0A60     delay_ms(100);
;PCODE: $00001024 VOL: 0
;PCODE: $00001025 VOL: 0
;PCODE: $00001026 VOL: 0
; 0000 0A61     lcd_putsf("span angle ");
;PCODE: $00001027 VOL: 0
;PCODE: $00001028 VOL: 0
;PCODE: $00001029 VOL: 0
; 0000 0A62     lcd_gotoxy(0,1);
;PCODE: $0000102A VOL: 0
;PCODE: $0000102B VOL: 0
;PCODE: $0000102C VOL: 0
;PCODE: $0000102D VOL: 0
; 0000 0A63     lcd_putsf("accepted! ");
;PCODE: $0000102E VOL: 0
;PCODE: $0000102F VOL: 0
;PCODE: $00001030 VOL: 0
; 0000 0A64     delay_ms(1500);
;PCODE: $00001031 VOL: 0
;PCODE: $00001032 VOL: 0
; 0000 0A65     calibfact =0;
;PCODE: $00001033 VOL: 0
;PCODE: $00001034 VOL: 0
;PCODE: $00001035 VOL: 0
; 0000 0A66     lcd_clear();
;PCODE: $00001036 VOL: 0
; 0000 0A67     }
; 0000 0A68 ///////////////////////////////////////////////
; 0000 0A69 
; 0000 0A6A 
; 0000 0A6B     }
;PCODE: $00001037 VOL: 0
;PCODE: $00001038 VOL: 0
; 0000 0A6C     }; //end of while loop
;PCODE: $00001039 VOL: 0
;PCODE: $0000103A VOL: 0
; 0000 0A6D 
; 0000 0A6E }
;PCODE: $0000103B VOL: 0
;PCODE: $0000103C VOL: 0
;PCODE: $0000103D VOL: 0
;
